{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/hooks/useOnce.ts", "../../../@strapi/content-manager/admin/src/pages/EditView/EditViewPage.tsx"],
  "sourcesContent": ["/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from 'react';\n\nexport const useOnce = (effect: React.EffectCallback) => React.useEffect(effect, emptyDeps);\n\nconst emptyDeps: React.DependencyList = [];\n", "import * as React from 'react';\n\nimport {\n  Page,\n  Blocker,\n  Form,\n  useRBAC,\n  useNotification,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { Grid, Main, Tabs } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { SINGLE_TYPES } from '../../constants/collections';\nimport { PERMISSIONS } from '../../constants/plugin';\nimport { DocumentContextProvider } from '../../features/DocumentContext';\nimport { DocumentRBAC, useDocumentRBAC } from '../../features/DocumentRBAC';\nimport { useDoc, type UseDocument } from '../../hooks/useDocument';\nimport { useDocumentLayout } from '../../hooks/useDocumentLayout';\nimport { useLazyComponents } from '../../hooks/useLazyComponents';\nimport { useOnce } from '../../hooks/useOnce';\nimport { getTranslation } from '../../utils/translations';\nimport { createYupSchema } from '../../utils/validation';\n\nimport { FormLayout } from './components/FormLayout';\nimport { Header } from './components/Header';\nimport { Panels } from './components/Panels';\n\n/* -------------------------------------------------------------------------------------------------\n * EditViewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditViewPage = () => {\n  const location = useLocation();\n  const [\n    {\n      query: { status },\n    },\n    setQuery,\n  ] = useQueryParams<{ status: 'draft' | 'published' }>({\n    status: 'draft',\n  });\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n\n  const doc = useDoc();\n  const {\n    document,\n    meta,\n    isLoading: isLoadingDocument,\n    schema,\n    components,\n    collectionType,\n    id,\n    model,\n    hasError,\n    getTitle,\n    getInitialFormValues,\n  } = doc;\n\n  const hasDraftAndPublished = schema?.options?.draftAndPublish ?? false;\n\n  useOnce(() => {\n    /**\n     * We only ever want to fire the notification once otherwise\n     * whenever the app re-renders it'll pop up regardless of\n     * what we do because the state comes from react-router-dom\n     */\n    if (location?.state && 'error' in location.state) {\n      toggleNotification({\n        type: 'danger',\n        message: location.state.error,\n        timeout: 5000,\n      });\n    }\n  });\n\n  const isLoadingActionsRBAC = useDocumentRBAC('EditViewPage', (state) => state.isLoading);\n\n  const isSingleType = collectionType === SINGLE_TYPES;\n\n  /**\n   * single-types don't current have an id, but because they're a singleton\n   * we can simply use the update operation to continuously update the same\n   * document with varying params.\n   */\n  const isCreatingDocument = !id && !isSingleType;\n\n  const {\n    isLoading: isLoadingLayout,\n    edit: {\n      layout,\n      settings: { mainField },\n    },\n  } = useDocumentLayout(model);\n\n  const { isLazyLoading } = useLazyComponents([]);\n\n  const isLoading = isLoadingActionsRBAC || isLoadingDocument || isLoadingLayout || isLazyLoading;\n\n  const initialValues = getInitialFormValues(isCreatingDocument);\n\n  if (isLoading && !document?.documentId) {\n    return <Page.Loading />;\n  }\n\n  if (!initialValues || hasError) {\n    return <Page.Error />;\n  }\n\n  const handleTabChange = (status: string) => {\n    if (status === 'published' || status === 'draft') {\n      setQuery({ status }, 'push', true);\n    }\n  };\n\n  const validateSync = (values: Record<string, unknown>, options: Record<string, string>) => {\n    const yupSchema = createYupSchema(schema?.attributes, components, {\n      status,\n      ...options,\n    });\n\n    return yupSchema.validateSync(values, { abortEarly: false });\n  };\n\n  return (\n    <Main paddingLeft={10} paddingRight={10}>\n      <Page.Title>{getTitle(mainField)}</Page.Title>\n      <DocumentContextProvider\n        initialDocument={{\n          documentId: id!,\n          model,\n          collectionType,\n        }}\n      >\n        <Form\n          disabled={hasDraftAndPublished && status === 'published'}\n          initialValues={initialValues}\n          method={isCreatingDocument ? 'POST' : 'PUT'}\n          validate={(values: Record<string, unknown>, options: Record<string, string>) => {\n            const yupSchema = createYupSchema(schema?.attributes, components, {\n              status,\n              ...options,\n            });\n\n            return yupSchema.validate(values, { abortEarly: false });\n          }}\n          initialErrors={location?.state?.forceValidation ? validateSync(initialValues, {}) : {}}\n        >\n          {({ resetForm }) => (\n            <>\n              <Header\n                isCreating={isCreatingDocument}\n                status={hasDraftAndPublished ? getDocumentStatus(document, meta) : undefined}\n                title={getTitle(mainField)}\n              />\n              <Tabs.Root variant=\"simple\" value={status} onValueChange={handleTabChange}>\n                <Tabs.List\n                  aria-label={formatMessage({\n                    id: getTranslation('containers.edit.tabs.label'),\n                    defaultMessage: 'Document status',\n                  })}\n                >\n                  {hasDraftAndPublished ? (\n                    <>\n                      <StatusTab value=\"draft\">\n                        {formatMessage({\n                          id: getTranslation('containers.edit.tabs.draft'),\n                          defaultMessage: 'draft',\n                        })}\n                      </StatusTab>\n                      <StatusTab\n                        disabled={!meta || meta.availableStatus.length === 0}\n                        value=\"published\"\n                      >\n                        {formatMessage({\n                          id: getTranslation('containers.edit.tabs.published'),\n                          defaultMessage: 'published',\n                        })}\n                      </StatusTab>\n                    </>\n                  ) : null}\n                </Tabs.List>\n                <Grid.Root paddingTop={8} gap={4}>\n                  <Grid.Item col={9} s={12} direction=\"column\" alignItems=\"stretch\">\n                    <Tabs.Content value=\"draft\">\n                      <FormLayout layout={layout} document={doc} />\n                    </Tabs.Content>\n                    <Tabs.Content value=\"published\">\n                      <FormLayout layout={layout} document={doc} />\n                    </Tabs.Content>\n                  </Grid.Item>\n                  <Grid.Item col={3} s={12} direction=\"column\" alignItems=\"stretch\">\n                    <Panels />\n                  </Grid.Item>\n                </Grid.Root>\n              </Tabs.Root>\n              <Blocker\n                // We reset the form to the published version to avoid errors like â€“ https://strapi-inc.atlassian.net/browse/CONTENT-2284\n                onProceed={resetForm}\n              />\n            </>\n          )}\n        </Form>\n      </DocumentContextProvider>\n    </Main>\n  );\n};\n\nconst StatusTab = styled(Tabs.Trigger)`\n  text-transform: uppercase;\n`;\n\n/**\n * @internal\n * @description Returns the status of the document where its latest state takes priority,\n * this typically will be \"published\" unless a user has edited their draft in which we should\n * display \"modified\".\n */\nconst getDocumentStatus = (\n  document: ReturnType<UseDocument>['document'],\n  meta: ReturnType<UseDocument>['meta']\n): 'draft' | 'published' | 'modified' => {\n  const docStatus = document?.status;\n  const statuses = meta?.availableStatus ?? [];\n\n  /**\n   * Creating an entry\n   */\n  if (!docStatus) {\n    return 'draft';\n  }\n\n  /**\n   * We're viewing a draft, but the document could have a published version\n   */\n  if (docStatus === 'draft' && statuses.find((doc) => doc.publishedAt !== null)) {\n    return 'published';\n  }\n\n  return docStatus;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedEditViewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedEditViewPage = () => {\n  const { slug = '' } = useParams<{\n    slug: string;\n  }>();\n  const {\n    permissions = [],\n    isLoading,\n    error,\n  } = useRBAC(\n    PERMISSIONS.map((action) => ({\n      action,\n      subject: slug,\n    }))\n  );\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (error || !slug) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Page.Protect permissions={permissions}>\n      {({ permissions }) => (\n        <DocumentRBAC permissions={permissions}>\n          <EditViewPage />\n        </DocumentRBAC>\n      )}\n    </Page.Protect>\n  );\n};\n\nexport { EditViewPage, ProtectedEditViewPage, getDocumentStatus };\n"],
  "mappings": "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",
  "names": ["useOnce", "effect", "useEffect", "emptyDeps", "EditViewPage", "location", "useLocation", "query", "status", "setQuery", "useQueryParams", "formatMessage", "useIntl", "toggleNotification", "useNotification", "doc", "useDoc", "document", "meta", "isLoading", "isLoadingDocument", "schema", "components", "collectionType", "id", "model", "hasError", "getTitle", "getInitialFormValues", "hasDraftAndPublished", "options", "draftAndPublish", "useOnce", "state", "type", "message", "error", "timeout", "isLoadingActionsRBAC", "useDocumentRBAC", "isSingleType", "SINGLE_TYPES", "isCreatingDocument", "isLoadingLayout", "edit", "layout", "settings", "mainField", "useDocumentLayout", "isLazyLoading", "useLazyComponents", "initialValues", "documentId", "_jsx", "Page", "Loading", "Error", "handleTabChange", "validateSync", "values", "yupSchema", "createYupSchema", "attributes", "abortEarly", "_jsxs", "Main", "paddingLeft", "paddingRight", "Title", "DocumentContextProvider", "initialDocument", "Form", "disabled", "method", "validate", "initialErrors", "forceValidation", "resetForm", "_Fragment", "Header", "isCreating", "getDocumentStatus", "undefined", "title", "Tabs", "Root", "variant", "value", "onValueChange", "List", "aria-label", "getTranslation", "defaultMessage", "StatusTab", "availableStatus", "length", "Grid", "paddingTop", "gap", "Item", "col", "s", "direction", "alignItems", "Content", "FormLayout", "Panels", "Blocker", "onProceed", "styled", "Trigger", "docStatus", "statuses", "find", "publishedAt", "ProtectedEditViewPage", "slug", "useParams", "permissions", "useRBAC", "PERMISSIONS", "map", "action", "subject", "Protect", "DocumentRBAC"]
}
