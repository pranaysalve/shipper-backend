import {
  FormLayout,
  useLazyComponents
} from "./chunk-RXBOAHU3.js";
import {
  Header,
  Panels
} from "./chunk-VLHKB3Y4.js";
import {
  DocumentContextProvider,
  DocumentRBAC,
  PERMISSIONS,
  useDocumentRBAC
} from "./chunk-ER3PRL7C.js";
import {
  SINGLE_TYPES,
  createYupSchema,
  useDoc,
  useDocumentLayout
} from "./chunk-JIFANRG6.js";
import {
  getTranslation
} from "./chunk-HIZVCZYI.js";
import {
  Blocker,
  Form
} from "./chunk-W2EBIS6P.js";
import {
  useRBAC
} from "./chunk-2YJPP6F5.js";
import {
  Page
} from "./chunk-LQ66U5BX.js";
import {
  useQueryParams
} from "./chunk-7IDP7SCX.js";
import {
  useNotification
} from "./chunk-GSOKMUI2.js";
import {
  Grid,
  Main,
  Tabs,
  useIntl
} from "./chunk-GEQAKZDT.js";
import {
  useLocation,
  useParams
} from "./chunk-TUXTO2Z5.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-6EUTJK7T.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-manager/dist/admin/pages/EditView/EditViewPage.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);

// node_modules/@strapi/content-manager/dist/admin/hooks/useOnce.mjs
var React = __toESM(require_react(), 1);
var useOnce = (effect) => React.useEffect(effect, emptyDeps);
var emptyDeps = [];

// node_modules/@strapi/content-manager/dist/admin/pages/EditView/EditViewPage.mjs
var EditViewPage = () => {
  var _a, _b;
  const location = useLocation();
  const [{ query: { status } }, setQuery] = useQueryParams({
    status: "draft"
  });
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const doc = useDoc();
  const { document, meta, isLoading: isLoadingDocument, schema, components, collectionType, id, model, hasError, getTitle, getInitialFormValues } = doc;
  const hasDraftAndPublished = ((_a = schema == null ? void 0 : schema.options) == null ? void 0 : _a.draftAndPublish) ?? false;
  useOnce(() => {
    if ((location == null ? void 0 : location.state) && "error" in location.state) {
      toggleNotification({
        type: "danger",
        message: location.state.error,
        timeout: 5e3
      });
    }
  });
  const isLoadingActionsRBAC = useDocumentRBAC("EditViewPage", (state) => state.isLoading);
  const isSingleType = collectionType === SINGLE_TYPES;
  const isCreatingDocument = !id && !isSingleType;
  const { isLoading: isLoadingLayout, edit: { layout, settings: { mainField } } } = useDocumentLayout(model);
  const { isLazyLoading } = useLazyComponents([]);
  const isLoading = isLoadingActionsRBAC || isLoadingDocument || isLoadingLayout || isLazyLoading;
  const initialValues = getInitialFormValues(isCreatingDocument);
  if (isLoading && !(document == null ? void 0 : document.documentId)) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (!initialValues || hasError) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  const handleTabChange = (status2) => {
    if (status2 === "published" || status2 === "draft") {
      setQuery({
        status: status2
      }, "push", true);
    }
  };
  const validateSync = (values, options) => {
    const yupSchema = createYupSchema(schema == null ? void 0 : schema.attributes, components, {
      status,
      ...options
    });
    return yupSchema.validateSync(values, {
      abortEarly: false
    });
  };
  return (0, import_jsx_runtime.jsxs)(Main, {
    paddingLeft: 10,
    paddingRight: 10,
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: getTitle(mainField)
      }),
      (0, import_jsx_runtime.jsx)(DocumentContextProvider, {
        initialDocument: {
          documentId: id,
          model,
          collectionType
        },
        children: (0, import_jsx_runtime.jsx)(Form, {
          disabled: hasDraftAndPublished && status === "published",
          initialValues,
          method: isCreatingDocument ? "POST" : "PUT",
          validate: (values, options) => {
            const yupSchema = createYupSchema(schema == null ? void 0 : schema.attributes, components, {
              status,
              ...options
            });
            return yupSchema.validate(values, {
              abortEarly: false
            });
          },
          initialErrors: ((_b = location == null ? void 0 : location.state) == null ? void 0 : _b.forceValidation) ? validateSync(initialValues, {}) : {},
          children: ({ resetForm }) => (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
            children: [
              (0, import_jsx_runtime.jsx)(Header, {
                isCreating: isCreatingDocument,
                status: hasDraftAndPublished ? getDocumentStatus(document, meta) : void 0,
                title: getTitle(mainField)
              }),
              (0, import_jsx_runtime.jsxs)(Tabs.Root, {
                variant: "simple",
                value: status,
                onValueChange: handleTabChange,
                children: [
                  (0, import_jsx_runtime.jsx)(Tabs.List, {
                    "aria-label": formatMessage({
                      id: getTranslation("containers.edit.tabs.label"),
                      defaultMessage: "Document status"
                    }),
                    children: hasDraftAndPublished ? (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
                      children: [
                        (0, import_jsx_runtime.jsx)(StatusTab, {
                          value: "draft",
                          children: formatMessage({
                            id: getTranslation("containers.edit.tabs.draft"),
                            defaultMessage: "draft"
                          })
                        }),
                        (0, import_jsx_runtime.jsx)(StatusTab, {
                          disabled: !meta || meta.availableStatus.length === 0,
                          value: "published",
                          children: formatMessage({
                            id: getTranslation("containers.edit.tabs.published"),
                            defaultMessage: "published"
                          })
                        })
                      ]
                    }) : null
                  }),
                  (0, import_jsx_runtime.jsxs)(Grid.Root, {
                    paddingTop: 8,
                    gap: 4,
                    children: [
                      (0, import_jsx_runtime.jsxs)(Grid.Item, {
                        col: 9,
                        s: 12,
                        direction: "column",
                        alignItems: "stretch",
                        children: [
                          (0, import_jsx_runtime.jsx)(Tabs.Content, {
                            value: "draft",
                            children: (0, import_jsx_runtime.jsx)(FormLayout, {
                              layout,
                              document: doc
                            })
                          }),
                          (0, import_jsx_runtime.jsx)(Tabs.Content, {
                            value: "published",
                            children: (0, import_jsx_runtime.jsx)(FormLayout, {
                              layout,
                              document: doc
                            })
                          })
                        ]
                      }),
                      (0, import_jsx_runtime.jsx)(Grid.Item, {
                        col: 3,
                        s: 12,
                        direction: "column",
                        alignItems: "stretch",
                        children: (0, import_jsx_runtime.jsx)(Panels, {})
                      })
                    ]
                  })
                ]
              }),
              (0, import_jsx_runtime.jsx)(Blocker, {
                // We reset the form to the published version to avoid errors like â€“ https://strapi-inc.atlassian.net/browse/CONTENT-2284
                onProceed: resetForm
              })
            ]
          })
        })
      })
    ]
  });
};
var StatusTab = dt(Tabs.Trigger)`
  text-transform: uppercase;
`;
var getDocumentStatus = (document, meta) => {
  const docStatus = document == null ? void 0 : document.status;
  const statuses = (meta == null ? void 0 : meta.availableStatus) ?? [];
  if (!docStatus) {
    return "draft";
  }
  if (docStatus === "draft" && statuses.find((doc) => doc.publishedAt !== null)) {
    return "published";
  }
  return docStatus;
};
var ProtectedEditViewPage = () => {
  const { slug = "" } = useParams();
  const { permissions = [], isLoading, error } = useRBAC(PERMISSIONS.map((action) => ({
    action,
    subject: slug
  })));
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (error || !slug) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsx)(Page.Protect, {
    permissions,
    children: ({ permissions: permissions2 }) => (0, import_jsx_runtime.jsx)(DocumentRBAC, {
      permissions: permissions2,
      children: (0, import_jsx_runtime.jsx)(EditViewPage, {})
    })
  });
};

export {
  EditViewPage,
  getDocumentStatus,
  ProtectedEditViewPage
};
//# sourceMappingURL=chunk-HTC5FB4R.js.map
