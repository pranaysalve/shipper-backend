{
  "version": 3,
  "sources": ["../../../lodash/fp/mapValues.js", "../../../@strapi/content-manager/admin/src/constants/plugin.ts", "../../../@strapi/content-manager/admin/src/features/DocumentContext.tsx", "../../../@strapi/content-manager/admin/src/features/DocumentRBAC.tsx", "../../../@strapi/content-manager/admin/src/hooks/useDocumentActions.ts", "../../../@strapi/content-manager/admin/src/pages/EditView/components/DocumentStatus.tsx", "../../../@strapi/content-manager/admin/src/history/routes.tsx", "../../../@strapi/content-manager/admin/src/preview/routes.tsx", "../../../@strapi/content-manager/admin/src/router.tsx", "../../../@strapi/content-manager/admin/src/pages/EditView/components/DocumentActions.tsx"],
  "sourcesContent": ["var convert = require('./convert'),\n    func = convert('mapValues', require('../mapValues'));\n\nfunc.placeholder = require('./placeholder');\nmodule.exports = func;\n", "const PLUGIN_ID = 'content-manager';\n\nconst PERMISSIONS = [\n  'plugin::content-manager.explorer.create',\n  'plugin::content-manager.explorer.read',\n  'plugin::content-manager.explorer.update',\n  'plugin::content-manager.explorer.delete',\n  'plugin::content-manager.explorer.publish',\n];\n\nexport { PLUGIN_ID, PERMISSIONS };\n", "import * as React from 'react';\n\nimport { createContext } from '@strapi/admin/strapi-admin';\n\nimport { useDocument, type UseDocument } from '../hooks/useDocument';\nimport { buildValidParams } from '../utils/api';\n\ninterface DocumentMeta {\n  /**\n   * The equivalent of the \":id\" url param value\n   * i.e. gus5a67jcboa3o2zjnz39mb1\n   */\n  documentId: string;\n  /**\n   * The equivalent of the url \":slug\" param value\n   * i.e. api::articles.article\n   */\n  model: string;\n  /**\n   * The equivalent of the url \":collectionType\" param value\n   * i.e. collection-types or single-types\n   */\n  collectionType: string;\n  /**\n   * Query params object\n   * i.e. { locale: 'fr' }\n   */\n  params?: Record<string, string | string[] | null>;\n}\n\ninterface DocumentContextValue {\n  rootDocumentMeta: DocumentMeta;\n  document: ReturnType<UseDocument>;\n  meta: DocumentMeta;\n  changeDocument: (newRelation: DocumentMeta) => void;\n  documentHistory: DocumentMeta[];\n  setDocumentHistory: React.Dispatch<React.SetStateAction<DocumentMeta[]>>;\n  onPreview?: () => void;\n}\n\nconst [DocumentProvider, useDocumentContext] =\n  createContext<DocumentContextValue>('DocumentContext');\n\n/**\n * TODO: Document in contributor docs, Add unit test\n *\n * This context provider and its associated hook are used to access a document at its root level\n * and expose a function to change the current document being viewed to one of the root level docuemnt's relations.\n *\n * The useDocumentContext hook exposes:\n * - meta: information about the currentDocument,\n * - document: the actual document,\n * - changeDocument: a function to change the current document to one of its relations.\n * - rootDocumentMeta: information about the root level document (current page)\n */\nconst DocumentContextProvider = ({\n  children,\n  initialDocument,\n  onPreview,\n}: {\n  children: React.ReactNode | React.ReactNode[];\n  initialDocument: DocumentMeta;\n  onPreview?: () => void;\n}) => {\n  /**\n   * Initialize with the \"root\" document and expose a setter method to change to\n   * one of the root level document's relations.\n   */\n  const [currentDocumentMeta, changeDocument] = React.useState<DocumentMeta>(initialDocument);\n  const params = React.useMemo(\n    () => buildValidParams(currentDocumentMeta.params ?? {}),\n    [currentDocumentMeta.params]\n  );\n  const document = useDocument({ ...currentDocumentMeta, params });\n\n  const [documentHistory, setDocumentHistory] = React.useState<DocumentMeta[]>([]);\n\n  return (\n    <DocumentProvider\n      changeDocument={changeDocument}\n      document={document}\n      rootDocumentMeta={{\n        documentId: initialDocument.documentId,\n        model: initialDocument.model,\n        collectionType: initialDocument.collectionType,\n      }}\n      meta={currentDocumentMeta}\n      documentHistory={documentHistory}\n      setDocumentHistory={setDocumentHistory}\n      onPreview={onPreview}\n    >\n      {children}\n    </DocumentProvider>\n  );\n};\n\nexport { useDocumentContext, DocumentContextProvider };\nexport type { DocumentMeta };\n", "import * as React from 'react';\n\nimport {\n  useRBAC,\n  useAuth,\n  type Permission,\n  createContext,\n  Page,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { useParams } from 'react-router-dom';\n\nimport type { Schema } from '@strapi/types';\n\n/**\n * The boolean values indicate the global actions a user can perform on the document.\n * The `string[]` values tell us specifically which fields the actions can be performed on,\n * for example, if the `canReadFields` array is empty, than no fields can be read by the user.\n * This can happen even if the user can read the document.\n */\ninterface DocumentRBACContextValue {\n  canCreate?: boolean;\n  canCreateFields: string[];\n  canDelete?: boolean;\n  canPublish?: boolean;\n  canRead?: boolean;\n  canReadFields: string[];\n  canUpdate?: boolean;\n  canUpdateFields: string[];\n  canUserAction: (\n    fieldName: string,\n    fieldsUserCanAction: string[],\n    fieldType: Schema.Attribute.Kind\n  ) => boolean;\n  isLoading: boolean;\n}\n\nconst [DocumentRBACProvider, useDocumentRBAC] = createContext<DocumentRBACContextValue>(\n  'DocumentRBAC',\n  {\n    canCreate: false,\n    canCreateFields: [],\n    canDelete: false,\n    canPublish: false,\n    canRead: false,\n    canReadFields: [],\n    canUpdate: false,\n    canUpdateFields: [],\n    canUserAction: () => false,\n    isLoading: false,\n  }\n);\n\ninterface DocumentRBACProps {\n  children: React.ReactNode;\n  permissions: Permission[] | null;\n  model?: string;\n}\n\n/**\n * @internal This component is not meant to be used outside of the Content Manager plugin.\n * It depends on knowing the slug/model of the content-type using the params of the URL or the model if it is passed as arg.\n * If you do use the hook outside of the context, we default to `false` for all actions.\n *\n * It then creates an list of `can{Action}` that are passed to the context for consumption\n * within the app to enforce RBAC.\n */\nconst DocumentRBAC = ({ children, permissions, model }: DocumentRBACProps) => {\n  const { slug } = useParams<{ slug: string }>();\n\n  if (!slug && !model) {\n    throw new Error('Cannot find the slug param in the URL or the model prop is not provided.');\n  }\n\n  const contentTypeUid = model ?? slug;\n\n  const [{ rawQuery }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\n\n  const userPermissions = useAuth('DocumentRBAC', (state) => state.permissions);\n\n  const contentTypePermissions = React.useMemo(() => {\n    const contentTypePermissions = userPermissions.filter(\n      (permission) => permission.subject === contentTypeUid\n    );\n    return contentTypePermissions.reduce<Record<string, Permission[]>>((acc, permission) => {\n      const [action] = permission.action.split('.').slice(-1);\n      return { ...acc, [action]: [permission] };\n    }, {});\n  }, [contentTypeUid, userPermissions]);\n\n  const { isLoading, allowedActions } = useRBAC(\n    contentTypePermissions,\n    permissions ?? undefined,\n    // TODO: useRBAC context should be typed and built differently\n    // We are passing raw query as context to the hook so that it can\n    // rely on the locale provided from DocumentRBAC for its permission calculations.\n    rawQuery\n  );\n\n  const canCreateFields =\n    !isLoading && allowedActions.canCreate\n      ? extractAndDedupeFields(contentTypePermissions.create)\n      : [];\n\n  const canReadFields =\n    !isLoading && allowedActions.canRead ? extractAndDedupeFields(contentTypePermissions.read) : [];\n\n  const canUpdateFields =\n    !isLoading && allowedActions.canUpdate\n      ? extractAndDedupeFields(contentTypePermissions.update)\n      : [];\n\n  /**\n   * @description Checks if the user can perform an action on a field based on the field names\n   * provided as the second argument.\n   */\n  const canUserAction: DocumentRBACContextValue['canUserAction'] = React.useCallback(\n    (fieldName, fieldsUserCanAction, fieldType) => {\n      const name = removeNumericalStrings(fieldName.split('.'));\n\n      const componentFieldNames = fieldsUserCanAction\n        // filter out fields that aren't components (components are dot separated)\n        .filter((field) => field.split('.').length > 1);\n\n      if (fieldType === 'component') {\n        // check if the field name is within any of those arrays\n        return componentFieldNames.some((field) => {\n          return field.includes(name.join('.'));\n        });\n      }\n\n      /**\n       * The field is within a component.\n       */\n      if (name.length > 1) {\n        return componentFieldNames.includes(name.join('.'));\n      }\n\n      /**\n       * just a regular field\n       */\n      return fieldsUserCanAction.includes(fieldName);\n    },\n    []\n  );\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <DocumentRBACProvider\n      isLoading={isLoading}\n      canCreateFields={canCreateFields}\n      canReadFields={canReadFields}\n      canUpdateFields={canUpdateFields}\n      canUserAction={canUserAction}\n      {...allowedActions}\n    >\n      {children}\n    </DocumentRBACProvider>\n  );\n};\n\n/**\n * @internal it's really small, but it's used three times in a row and DRY for something this straight forward.\n */\nconst extractAndDedupeFields = (permissions: Permission[] = []) =>\n  permissions\n    .flatMap((permission) => permission.properties?.fields)\n    .filter(\n      (field, index, arr): field is string =>\n        arr.indexOf(field) === index && typeof field === 'string'\n    );\n\n/**\n * @internal removes numerical strings from arrays.\n * @example\n * ```ts\n * const name = 'a.0.b';\n * const res = removeNumericalStrings(name.split('.'));\n * console.log(res); // ['a', 'b']\n * ```\n */\nconst removeNumericalStrings = (arr: string[]) => arr.filter((item) => isNaN(Number(item)));\n\nexport { DocumentRBAC, useDocumentRBAC, DocumentRBACContextValue, DocumentRBACProps };\n", "import * as React from 'react';\n\nimport { SerializedError } from '@reduxjs/toolkit';\nimport {\n  useNotification,\n  useTracking,\n  type TrackingEvent,\n  useAPIErrorHandler,\n  useGuidedTour,\n} from '@strapi/admin/strapi-admin';\nimport { useIntl, type MessageDescriptor } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\n\nimport {\n  useAutoCloneDocumentMutation,\n  useCloneDocumentMutation,\n  useCreateDocumentMutation,\n  useDeleteDocumentMutation,\n  useDeleteManyDocumentsMutation,\n  useDiscardDocumentMutation,\n  useLazyGetDocumentQuery,\n  usePublishDocumentMutation,\n  usePublishManyDocumentsMutation,\n  useUnpublishDocumentMutation,\n  useUnpublishManyDocumentsMutation,\n  useUpdateDocumentMutation,\n} from '../services/documents';\nimport { BaseQueryError } from '../utils/api';\nimport { getTranslation } from '../utils/translations';\n\nimport type { Document } from './useDocument';\nimport type {\n  AutoClone,\n  Clone,\n  Create,\n  Delete,\n  BulkDelete,\n  Discard,\n  FindOne,\n  Publish,\n  BulkPublish,\n  Update,\n  Unpublish,\n  BulkUnpublish,\n} from '../../../shared/contracts/collection-types';\n\nconst DEFAULT_UNEXPECTED_ERROR_MSG = {\n  id: 'notification.error',\n  defaultMessage: 'An error occurred, please try again',\n} satisfies MessageDescriptor;\n\ntype OperationResponse<TResponse extends { data: any; meta?: any; error?: any }> =\n  | Pick<TResponse, 'data'>\n  | Pick<TResponse, 'data' | 'meta'>\n  | { error: BaseQueryError | SerializedError };\n\ntype BulkOperationResponse<TResponse extends { data: any; error?: any }> =\n  | Pick<TResponse, 'data'>\n  | { error: BaseQueryError | SerializedError };\n\ntype UseDocumentActions = (\n  fromPreview?: boolean,\n  fromRelationModal?: boolean\n) => {\n  /**\n   * @description Attempts to clone a document based on the provided sourceId.\n   * This will return a list of the fields as an error if it's unable to clone.\n   * You most likely want to use the `clone` action instead.\n   */\n  isLoading: boolean;\n  autoClone: (args: {\n    model: string;\n    sourceId: string;\n  }) => Promise<OperationResponse<AutoClone.Response>>;\n  clone: (\n    args: {\n      model: string;\n      documentId: string;\n      params?: object;\n    },\n    document: Omit<Document, 'id'>,\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willCreateEntry' | 'didCreateEntry' | 'didNotCreateEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Clone.Response>>;\n  create: (\n    args: {\n      model: string;\n      params?: object;\n    },\n    document: Omit<Document, 'id'>,\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willCreateEntry' | 'didCreateEntry' | 'didNotCreateEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Create.Response>>;\n  delete: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willDeleteEntry' | 'didDeleteEntry' | 'didNotDeleteEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Delete.Response>>;\n  deleteMany: (args: {\n    model: string;\n    documentIds: string[];\n    params?: object;\n  }) => Promise<BulkOperationResponse<BulkDelete.Response>>;\n  discard: (args: {\n    collectionType: string;\n    model: string;\n    documentId?: string;\n    params?: object;\n  }) => Promise<OperationResponse<Discard.Response>>;\n  getDocument: (args: {\n    collectionType: string;\n    model: string;\n    documentId?: string;\n    params?: object;\n  }) => Promise<FindOne.Response | undefined>;\n  publish: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    document: Partial<Document>\n  ) => Promise<OperationResponse<Publish.Response>>;\n  publishMany: (args: {\n    model: string;\n    documentIds: string[];\n    params?: object;\n  }) => Promise<BulkOperationResponse<BulkPublish.Response>>;\n  update: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    document: Partial<Document>,\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willEditEntry' | 'didEditEntry' | 'didNotEditEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Update.Response>>;\n  unpublish: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    discardDraft?: boolean\n  ) => Promise<OperationResponse<Unpublish.Response>>;\n  unpublishMany: (args: {\n    model: string;\n    documentIds: string[];\n    params?: object;\n  }) => Promise<BulkOperationResponse<BulkUnpublish.Response>>;\n};\n\ntype IUseDocumentActs = ReturnType<UseDocumentActions>;\n\n/**\n * @alpha\n * @public\n * @description Contains all the operations that can be performed on a single document.\n * Designed to be able to be used anywhere within a Strapi app. The hooks will handle\n * notifications should the operation fail, however the response is always returned incase\n * the user needs to handle side-effects.\n * @example\n * ```tsx\n * import { Form } from '@strapi/admin/admin';\n *\n * const { id, model, collectionType } = useParams<{ id: string; model: string; collectionType: string }>();\n * const { update } = useDocumentActions();\n *\n * const handleSubmit = async (data) => {\n *  await update({ collectionType, model, documentId: id }, data);\n * }\n *\n * return <Form method=\"PUT\" onSubmit={handleSubmit} />\n * ```\n *\n * @see {@link https://contributor.strapi.io/docs/core/content-manager/hooks/use-document-operations} for more information\n */\nconst useDocumentActions: UseDocumentActions = (fromPreview = false, fromRelationModal = false) => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const setCurrentStep = useGuidedTour('useDocumentActions', (state) => state.setCurrentStep);\n\n  const [deleteDocument, { isLoading: isDeleting }] = useDeleteDocumentMutation();\n  const _delete: IUseDocumentActs['delete'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, trackerProperty) => {\n      try {\n        trackUsage('willDeleteEntry', trackerProperty);\n\n        const res = await deleteDocument({\n          collectionType,\n          model,\n          documentId,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.delete'),\n            defaultMessage: 'Deleted document',\n          }),\n        });\n\n        trackUsage('didDeleteEntry', trackerProperty);\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotDeleteEntry', { error: err, ...trackerProperty });\n\n        throw err;\n      }\n    },\n    [trackUsage, deleteDocument, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [deleteManyDocuments, { isLoading: isDeletingMany }] = useDeleteManyDocumentsMutation();\n\n  const deleteMany: IUseDocumentActs['deleteMany'] = React.useCallback(\n    async ({ model, documentIds, params }) => {\n      try {\n        trackUsage('willBulkDeleteEntries');\n\n        const res = await deleteManyDocuments({\n          model,\n          documentIds,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          title: formatMessage({\n            id: getTranslation('success.records.delete'),\n            defaultMessage: 'Successfully deleted.',\n          }),\n          message: '',\n        });\n\n        trackUsage('didBulkDeleteEntries');\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotBulkDeleteEntries');\n\n        throw err;\n      }\n    },\n    [trackUsage, deleteManyDocuments, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [discardDocument, { isLoading: isDiscardingDocument }] = useDiscardDocumentMutation();\n  const discard: IUseDocumentActs['discard'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }) => {\n      try {\n        const res = await discardDocument({\n          collectionType,\n          model,\n          documentId,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: 'content-manager.success.record.discard',\n            defaultMessage: 'Changes discarded',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [discardDocument, formatAPIError, formatMessage, toggleNotification]\n  );\n\n  const [publishDocument, { isLoading: isPublishing }] = usePublishDocumentMutation();\n  const publish: IUseDocumentActs['publish'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, data) => {\n      try {\n        trackUsage('willPublishEntry', { documentId });\n\n        const res = await publishDocument({\n          collectionType,\n          model,\n          documentId,\n          data,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n          return { error: res.error };\n        }\n\n        trackUsage('didPublishEntry', { documentId, fromPreview, fromRelationModal });\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.publish'),\n            defaultMessage: 'Published document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [\n      trackUsage,\n      publishDocument,\n      fromPreview,\n      fromRelationModal,\n      toggleNotification,\n      formatMessage,\n      formatAPIError,\n    ]\n  );\n\n  const [publishManyDocuments, { isLoading: isPublishingMany }] = usePublishManyDocumentsMutation();\n  const publishMany: IUseDocumentActs['publishMany'] = React.useCallback(\n    async ({ model, documentIds, params }) => {\n      try {\n        // TODO Confirm tracking events for bulk publish?\n\n        const res = await publishManyDocuments({\n          model,\n          documentIds,\n          params,\n        });\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.publish'),\n            defaultMessage: 'Published document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n        throw err;\n      }\n    },\n    [\n      // trackUsage,\n      publishManyDocuments,\n      toggleNotification,\n      formatMessage,\n      formatAPIError,\n    ]\n  );\n\n  const [updateDocument, { isLoading: isUpdating }] = useUpdateDocumentMutation();\n  const update: IUseDocumentActs['update'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, data, trackerProperty) => {\n      try {\n        trackUsage('willEditEntry', trackerProperty);\n\n        const res = await updateDocument({\n          collectionType,\n          model,\n          documentId,\n          data,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          trackUsage('didNotEditEntry', { error: res.error, ...trackerProperty });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didEditEntry', {\n          ...trackerProperty,\n          documentId: res.data.data.documentId,\n          fromPreview,\n          fromRelationModal,\n        });\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.save'),\n            defaultMessage: 'Saved document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        trackUsage('didNotEditEntry', { error: err, ...trackerProperty });\n\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [\n      trackUsage,\n      updateDocument,\n      fromPreview,\n      fromRelationModal,\n      toggleNotification,\n      formatMessage,\n      formatAPIError,\n    ]\n  );\n\n  const [unpublishDocument] = useUnpublishDocumentMutation();\n  const unpublish: IUseDocumentActs['unpublish'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, discardDraft = false) => {\n      try {\n        trackUsage('willUnpublishEntry');\n\n        const res = await unpublishDocument({\n          collectionType,\n          model,\n          documentId,\n          params,\n          data: {\n            discardDraft,\n          },\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didUnpublishEntry');\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.unpublish'),\n            defaultMessage: 'Unpublished document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [trackUsage, unpublishDocument, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [unpublishManyDocuments, { isLoading: isUnpublishingMany }] =\n    useUnpublishManyDocumentsMutation();\n  const unpublishMany: IUseDocumentActs['unpublishMany'] = React.useCallback(\n    async ({ model, documentIds, params }) => {\n      try {\n        trackUsage('willBulkUnpublishEntries');\n\n        const res = await unpublishManyDocuments({\n          model,\n          documentIds,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didBulkUnpublishEntries');\n\n        toggleNotification({\n          type: 'success',\n          title: formatMessage({\n            id: getTranslation('success.records.unpublish'),\n            defaultMessage: 'Successfully unpublished.',\n          }),\n          message: '',\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotBulkUnpublishEntries');\n\n        throw err;\n      }\n    },\n    [trackUsage, unpublishManyDocuments, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [createDocument] = useCreateDocumentMutation();\n  const create: IUseDocumentActs['create'] = React.useCallback(\n    async ({ model, params }, data, trackerProperty) => {\n      try {\n        const res = await createDocument({\n          model,\n          data,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          trackUsage('didNotCreateEntry', { error: res.error, ...trackerProperty });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didCreateEntry', { ...trackerProperty, documentId: res.data.data.documentId });\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.save'),\n            defaultMessage: 'Saved document',\n          }),\n        });\n\n        setCurrentStep('contentManager.success');\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotCreateEntry', { error: err, ...trackerProperty });\n\n        throw err;\n      }\n    },\n    [createDocument, formatAPIError, formatMessage, setCurrentStep, toggleNotification, trackUsage]\n  );\n\n  const [autoCloneDocument] = useAutoCloneDocumentMutation();\n  const autoClone: IUseDocumentActs['autoClone'] = React.useCallback(\n    async ({ model, sourceId }) => {\n      try {\n        const res = await autoCloneDocument({\n          model,\n          sourceId,\n        });\n\n        if ('error' in res) {\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.clone'),\n            defaultMessage: 'Cloned document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [autoCloneDocument, formatMessage, toggleNotification]\n  );\n\n  const [cloneDocument] = useCloneDocumentMutation();\n  const clone: IUseDocumentActs['clone'] = React.useCallback(\n    async ({ model, documentId, params }, body, trackerProperty) => {\n      try {\n        const { id: _id, ...restBody } = body;\n\n        /**\n         * If we're cloning we want to post directly to this endpoint\n         * so that the relations even if they're not listed in the EditView\n         * are correctly attached to the entry.\n         */\n        const res = await cloneDocument({\n          model,\n          sourceId: documentId,\n          data: restBody,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          trackUsage('didNotCreateEntry', { error: res.error, ...trackerProperty });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didCreateEntry', trackerProperty);\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.clone'),\n            defaultMessage: 'Cloned document',\n          }),\n        });\n\n        // Redirect to normal edit view\n        navigate(`../../${res.data.data.documentId}`, { relative: 'path' });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotCreateEntry', { error: err, ...trackerProperty });\n\n        throw err;\n      }\n    },\n    [cloneDocument, trackUsage, toggleNotification, formatMessage, formatAPIError, navigate]\n  );\n\n  const [getDoc] = useLazyGetDocumentQuery();\n  const getDocument: IUseDocumentActs['getDocument'] = React.useCallback(\n    async (args) => {\n      const { data } = await getDoc(args);\n\n      return data;\n    },\n    [getDoc]\n  );\n\n  return {\n    isLoading:\n      isPublishing ||\n      isUpdating ||\n      isDiscardingDocument ||\n      isDeleting ||\n      isDeletingMany ||\n      isUnpublishingMany ||\n      isPublishingMany,\n    autoClone,\n    clone,\n    create,\n    delete: _delete,\n    deleteMany,\n    discard,\n    getDocument,\n    publish,\n    publishMany,\n    unpublish,\n    unpublishMany,\n    update,\n  } satisfies IUseDocumentActs;\n};\n\nexport { useDocumentActions };\nexport type { UseDocumentActions, OperationResponse };\n", "import { Status, StatusProps, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { capitalise } from '../../../utils/strings';\n\ninterface DocumentStatusProps extends Omit<StatusProps, 'children' | 'variant'> {\n  /**\n   * The status of the document (draft, published, etc.)\n   * @default 'draft'\n   */\n  status?: string;\n}\n\n/**\n * @public\n * @description Displays the status of a document (draft, published, etc.)\n * and automatically calculates the appropriate variant for the status.\n */\nconst DocumentStatus = ({ status = 'draft', size = 'S', ...restProps }: DocumentStatusProps) => {\n  const statusVariant =\n    status === 'draft' ? 'secondary' : status === 'published' ? 'success' : 'alternative';\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Status {...restProps} size={size} variant={statusVariant} role=\"status\" aria-label={status}>\n      <Typography tag=\"span\" variant=\"omega\" fontWeight=\"bold\">\n        {formatMessage({\n          id: `content-manager.containers.List.${status}`,\n          defaultMessage: capitalise(status),\n        })}\n      </Typography>\n    </Status>\n  );\n};\n\nexport { DocumentStatus };\nexport type { DocumentStatusProps };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport { type PathRouteProps } from 'react-router-dom';\n\nconst ProtectedHistoryPage = React.lazy(() =>\n  import('./pages/History').then((mod) => ({ default: mod.ProtectedHistoryPage }))\n);\n\n/**\n * These routes will be merged with the rest of the Content Manager routes\n */\nconst routes: PathRouteProps[] = [\n  {\n    path: ':collectionType/:slug/:id/history',\n    Component: ProtectedHistoryPage,\n  },\n  {\n    path: ':collectionType/:slug/history',\n    Component: ProtectedHistoryPage,\n  },\n];\n\nexport { routes };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport type { PathRouteProps } from 'react-router-dom';\n\nconst ProtectedPreviewPage = React.lazy(() =>\n  import('./pages/Preview').then((mod) => ({ default: mod.ProtectedPreviewPage }))\n);\n\nconst routes: PathRouteProps[] = [\n  {\n    path: ':collectionType/:slug/:id/preview',\n    Component: ProtectedPreviewPage,\n  },\n  {\n    path: ':collectionType/:slug/preview',\n    Component: ProtectedPreviewPage,\n  },\n];\n\nexport { routes };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport { lazy } from 'react';\n\nimport { Navigate, PathRouteProps, useParams } from 'react-router-dom';\n\nimport { COLLECTION_TYPES, SINGLE_TYPES } from './constants/collections';\nimport { routes as historyRoutes } from './history/routes';\nimport { routes as previewRoutes } from './preview/routes';\n\nconst ProtectedEditViewPage = lazy(() =>\n  import('./pages/EditView/EditViewPage').then((mod) => ({ default: mod.ProtectedEditViewPage }))\n);\nconst ProtectedListViewPage = lazy(() =>\n  import('./pages/ListView/ListViewPage').then((mod) => ({ default: mod.ProtectedListViewPage }))\n);\nconst ProtectedListConfiguration = lazy(() =>\n  import('./pages/ListConfiguration/ListConfigurationPage').then((mod) => ({\n    default: mod.ProtectedListConfiguration,\n  }))\n);\nconst ProtectedEditConfigurationPage = lazy(() =>\n  import('./pages/EditConfigurationPage').then((mod) => ({\n    default: mod.ProtectedEditConfigurationPage,\n  }))\n);\nconst ProtectedComponentConfigurationPage = lazy(() =>\n  import('./pages/ComponentConfigurationPage').then((mod) => ({\n    default: mod.ProtectedComponentConfigurationPage,\n  }))\n);\nconst NoPermissions = lazy(() =>\n  import('./pages/NoPermissionsPage').then((mod) => ({ default: mod.NoPermissions }))\n);\nconst NoContentType = lazy(() =>\n  import('./pages/NoContentTypePage').then((mod) => ({ default: mod.NoContentType }))\n);\n\nconst CollectionTypePages = () => {\n  const { collectionType } = useParams<{ collectionType: string }>();\n\n  /**\n   * We only support two types of collections.\n   */\n  if (collectionType !== COLLECTION_TYPES && collectionType !== SINGLE_TYPES) {\n    return <Navigate to=\"/404\" />;\n  }\n\n  return collectionType === COLLECTION_TYPES ? (\n    <ProtectedListViewPage />\n  ) : (\n    <ProtectedEditViewPage />\n  );\n};\n\nconst CLONE_RELATIVE_PATH = ':collectionType/:slug/clone/:origin';\nconst CLONE_PATH = `/content-manager/${CLONE_RELATIVE_PATH}`;\nconst LIST_RELATIVE_PATH = ':collectionType/:slug';\nconst LIST_PATH = `/content-manager/collection-types/:slug`;\n\nconst routes: PathRouteProps[] = [\n  {\n    path: LIST_RELATIVE_PATH,\n    element: <CollectionTypePages />,\n  },\n  {\n    path: ':collectionType/:slug/:id',\n    Component: ProtectedEditViewPage,\n  },\n  {\n    path: CLONE_RELATIVE_PATH,\n    Component: ProtectedEditViewPage,\n  },\n  {\n    path: ':collectionType/:slug/configurations/list',\n    Component: ProtectedListConfiguration,\n  },\n  {\n    path: 'components/:slug/configurations/edit',\n    Component: ProtectedComponentConfigurationPage,\n  },\n  {\n    path: ':collectionType/:slug/configurations/edit',\n    Component: ProtectedEditConfigurationPage,\n  },\n  {\n    path: '403',\n    Component: NoPermissions,\n  },\n  {\n    path: 'no-content-types',\n    Component: NoContentType,\n  },\n  ...historyRoutes,\n  ...previewRoutes,\n];\n\nexport { routes, CLONE_PATH, LIST_PATH };\n", "import * as React from 'react';\n\nimport {\n  useForm,\n  useNotification,\n  NotificationConfig,\n  useAPIErrorHandler,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Dialog,\n  Flex,\n  Modal,\n  Radio,\n  Typography,\n  VisuallyHidden,\n  Menu,\n  ButtonProps,\n} from '@strapi/design-system';\nimport { Cross, More, WarningCircle } from '@strapi/icons';\nimport mapValues from 'lodash/fp/mapValues';\nimport { useIntl } from 'react-intl';\nimport { useMatch, useNavigate, useParams } from 'react-router-dom';\nimport { DefaultTheme, styled } from 'styled-components';\n\nimport { PUBLISHED_AT_ATTRIBUTE_NAME } from '../../../constants/attributes';\nimport { SINGLE_TYPES } from '../../../constants/collections';\nimport { useDocumentContext } from '../../../features/DocumentContext';\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\nimport { CLONE_PATH, LIST_PATH } from '../../../router';\nimport { useGetDraftRelationCountQuery } from '../../../services/documents';\nimport { isBaseQueryError, buildValidParams } from '../../../utils/api';\nimport { getTranslation } from '../../../utils/translations';\n\nimport type { RelationsFormValue } from './FormInputs/Relations/Relations';\nimport type { DocumentActionComponent } from '../../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * Types\n * -----------------------------------------------------------------------------------------------*/\ntype DocumentActionPosition = 'panel' | 'header' | 'table-row' | 'preview' | 'relation-modal';\n\ninterface DocumentActionDescription {\n  label: string;\n  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;\n  icon?: React.ReactNode;\n  /**\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * @default 'panel'\n   * @description Where the action should be rendered.\n   */\n  position?: DocumentActionPosition | DocumentActionPosition[];\n  dialog?: DialogOptions | NotificationOptions | ModalOptions;\n  /**\n   * @default 'secondary'\n   */\n  variant?: ButtonProps['variant'];\n  loading?: ButtonProps['loading'];\n}\n\ninterface DialogOptions {\n  type: 'dialog';\n  title: string;\n  content?: React.ReactNode;\n  variant?: ButtonProps['variant'];\n  onConfirm?: () => void | Promise<void>;\n  onCancel?: () => void | Promise<void>;\n}\n\ninterface NotificationOptions {\n  type: 'notification';\n  title: string;\n  link?: {\n    label: string;\n    url: string;\n    target?: string;\n  };\n  content?: string;\n  onClose?: () => void;\n  status?: NotificationConfig['type'];\n  timeout?: number;\n}\n\ninterface ModalOptions {\n  type: 'modal';\n  title: string;\n  content: React.ComponentType<{ onClose: () => void }> | React.ReactNode;\n  footer?: React.ComponentType<{ onClose: () => void }> | React.ReactNode;\n  onClose?: () => void;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActions\n * -----------------------------------------------------------------------------------------------*/\n\ninterface Action extends DocumentActionDescription {\n  id: string;\n}\n\ninterface DocumentActionsProps {\n  actions: Action[];\n}\n\nconst DocumentActions = ({ actions }: DocumentActionsProps) => {\n  const { formatMessage } = useIntl();\n  const [primaryAction, secondaryAction, ...restActions] = actions.filter((action) => {\n    if (action.position === undefined) {\n      return true;\n    }\n\n    const positions = Array.isArray(action.position) ? action.position : [action.position];\n    return positions.includes('panel');\n  });\n\n  if (!primaryAction) {\n    return null;\n  }\n\n  return (\n    <Flex direction=\"column\" gap={2} alignItems=\"stretch\" width=\"100%\">\n      <Flex gap={2}>\n        <DocumentActionButton {...primaryAction} variant={primaryAction.variant || 'default'} />\n        {restActions.length > 0 ? (\n          <DocumentActionsMenu\n            actions={restActions}\n            label={formatMessage({\n              id: 'content-manager.containers.edit.panels.default.more-actions',\n              defaultMessage: 'More document actions',\n            })}\n          />\n        ) : null}\n      </Flex>\n      {secondaryAction ? (\n        <DocumentActionButton\n          {...secondaryAction}\n          variant={secondaryAction.variant || 'secondary'}\n        />\n      ) : null}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionButton\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DocumentActionButtonProps extends Action {}\n\nconst DocumentActionButton = (action: DocumentActionButtonProps) => {\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\n  const { toggleNotification } = useNotification();\n\n  const handleClick = (action: Action) => async (e: React.MouseEvent) => {\n    const { onClick = () => false, dialog, id } = action;\n\n    const muteDialog = await onClick(e);\n\n    if (dialog && !muteDialog) {\n      switch (dialog.type) {\n        case 'notification':\n          toggleNotification({\n            title: dialog.title,\n            message: dialog.content,\n            type: dialog.status,\n            timeout: dialog.timeout,\n            onClose: dialog.onClose,\n          });\n          break;\n        case 'dialog':\n        case 'modal':\n          e.preventDefault();\n          setDialogId(id);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    setDialogId(null);\n  };\n\n  return (\n    <>\n      <Button\n        flex=\"auto\"\n        startIcon={action.icon}\n        disabled={action.disabled}\n        onClick={handleClick(action)}\n        justifyContent=\"center\"\n        variant={action.variant || 'default'}\n        paddingTop=\"7px\"\n        paddingBottom=\"7px\"\n        loading={action.loading}\n      >\n        {action.label}\n      </Button>\n      {action.dialog?.type === 'dialog' ? (\n        <DocumentActionConfirmDialog\n          {...action.dialog}\n          variant={action.dialog?.variant ?? action.variant}\n          isOpen={dialogId === action.id}\n          onClose={handleClose}\n        />\n      ) : null}\n      {action.dialog?.type === 'modal' ? (\n        <DocumentActionModal\n          {...action.dialog}\n          onModalClose={handleClose}\n          isOpen={dialogId === action.id}\n        />\n      ) : null}\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionMenu\n * -----------------------------------------------------------------------------------------------*/\ninterface DocumentActionsMenuProps {\n  actions: Action[];\n  children?: React.ReactNode;\n  label?: string;\n  variant?: 'ghost' | 'tertiary';\n}\n\nconst MenuItem = styled(Menu.Item)<{ isVariantDanger?: boolean; isDisabled?: boolean }>`\n  &:hover {\n    background: ${({ theme, isVariantDanger, isDisabled }) =>\n      isVariantDanger && !isDisabled ? theme.colors.danger100 : 'neutral'};\n  }\n`;\n\nconst DocumentActionsMenu = ({\n  actions,\n  children,\n  label,\n  variant = 'tertiary',\n}: DocumentActionsMenuProps) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const isDisabled = actions.every((action) => action.disabled) || actions.length === 0;\n\n  const handleClick = (action: Action) => async (e: React.SyntheticEvent) => {\n    const { onClick = () => false, dialog, id } = action;\n\n    const muteDialog = await onClick(e);\n\n    if (dialog && !muteDialog) {\n      switch (dialog.type) {\n        case 'notification':\n          toggleNotification({\n            title: dialog.title,\n            message: dialog.content,\n            type: dialog.status,\n            timeout: dialog.timeout,\n            onClose: dialog.onClose,\n          });\n          break;\n        case 'dialog':\n        case 'modal':\n          setDialogId(id);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    setDialogId(null);\n    setIsOpen(false);\n  };\n\n  return (\n    <Menu.Root open={isOpen} onOpenChange={setIsOpen}>\n      <Menu.Trigger\n        disabled={isDisabled}\n        size=\"S\"\n        endIcon={null}\n        paddingTop=\"4px\"\n        paddingLeft=\"7px\"\n        paddingRight=\"7px\"\n        variant={variant}\n      >\n        <More aria-hidden focusable={false} />\n        <VisuallyHidden tag=\"span\">\n          {label ||\n            formatMessage({\n              id: 'content-manager.containers.edit.panels.default.more-actions',\n              defaultMessage: 'More document actions',\n            })}\n        </VisuallyHidden>\n      </Menu.Trigger>\n      <Menu.Content maxHeight={undefined} popoverPlacement=\"bottom-end\">\n        {actions.map((action) => {\n          return (\n            <MenuItem\n              disabled={action.disabled}\n              /* @ts-expect-error – TODO: this is an error in the DS where it is most likely a synthetic event, not regular. */\n              onSelect={handleClick(action)}\n              display=\"block\"\n              key={action.id}\n              isVariantDanger={action.variant === 'danger'}\n              isDisabled={action.disabled}\n            >\n              <Flex justifyContent=\"space-between\" gap={4}>\n                <Flex\n                  color={!action.disabled ? convertActionVariantToColor(action.variant) : 'inherit'}\n                  gap={2}\n                  tag=\"span\"\n                >\n                  <Flex\n                    tag=\"span\"\n                    color={\n                      !action.disabled ? convertActionVariantToIconColor(action.variant) : 'inherit'\n                    }\n                  >\n                    {action.icon}\n                  </Flex>\n                  {action.label}\n                </Flex>\n              </Flex>\n            </MenuItem>\n          );\n        })}\n        {children}\n      </Menu.Content>\n      {actions.map((action) => {\n        return (\n          <React.Fragment key={action.id}>\n            {action.dialog?.type === 'dialog' ? (\n              <DocumentActionConfirmDialog\n                {...action.dialog}\n                variant={action.variant}\n                isOpen={dialogId === action.id}\n                onClose={handleClose}\n              />\n            ) : null}\n            {action.dialog?.type === 'modal' ? (\n              <DocumentActionModal\n                {...action.dialog}\n                onModalClose={handleClose}\n                isOpen={dialogId === action.id}\n              />\n            ) : null}\n          </React.Fragment>\n        );\n      })}\n    </Menu.Root>\n  );\n};\n\nconst convertActionVariantToColor = (\n  variant: DocumentActionDescription['variant'] = 'secondary'\n): keyof DefaultTheme['colors'] | undefined => {\n  switch (variant) {\n    case 'danger':\n      return 'danger600';\n    case 'secondary':\n      return undefined;\n    case 'success':\n      return 'success600';\n    default:\n      return 'primary600';\n  }\n};\n\nconst convertActionVariantToIconColor = (\n  variant: DocumentActionDescription['variant'] = 'secondary'\n): keyof DefaultTheme['colors'] | undefined => {\n  switch (variant) {\n    case 'danger':\n      return 'danger600';\n    case 'secondary':\n      return 'neutral500';\n    case 'success':\n      return 'success600';\n    default:\n      return 'primary600';\n  }\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionConfirmDialog\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DocumentActionConfirmDialogProps extends DialogOptions, Pick<Action, 'variant'> {\n  onClose: () => void;\n  isOpen: Dialog.Props['open'];\n  loading?: ButtonProps['loading'];\n}\n\nconst DocumentActionConfirmDialog = ({\n  onClose,\n  onCancel,\n  onConfirm,\n  title,\n  content,\n  isOpen,\n  variant = 'secondary',\n  loading,\n}: DocumentActionConfirmDialogProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleClose = async () => {\n    if (onCancel) {\n      await onCancel();\n    }\n\n    onClose();\n  };\n\n  const handleConfirm = async () => {\n    if (onConfirm) {\n      await onConfirm();\n    }\n\n    onClose();\n  };\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={handleClose}>\n      <Dialog.Content>\n        <Dialog.Header>{title}</Dialog.Header>\n        <Dialog.Body>{content}</Dialog.Body>\n        <Dialog.Footer>\n          <Dialog.Cancel>\n            <Button variant=\"tertiary\" fullWidth>\n              {formatMessage({\n                id: 'app.components.Button.cancel',\n                defaultMessage: 'Cancel',\n              })}\n            </Button>\n          </Dialog.Cancel>\n          <Button onClick={handleConfirm} variant={variant} fullWidth loading={loading}>\n            {formatMessage({\n              id: 'app.components.Button.confirm',\n              defaultMessage: 'Confirm',\n            })}\n          </Button>\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DocumentActionModalProps extends ModalOptions {\n  onModalClose: () => void;\n  isOpen?: boolean;\n}\n\nconst DocumentActionModal = ({\n  isOpen,\n  title,\n  onClose,\n  footer: Footer,\n  content: Content,\n  onModalClose,\n}: DocumentActionModalProps) => {\n  const handleClose = () => {\n    if (onClose) {\n      onClose();\n    }\n\n    onModalClose();\n  };\n\n  return (\n    <Modal.Root open={isOpen} onOpenChange={handleClose}>\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>{title}</Modal.Title>\n        </Modal.Header>\n        {typeof Content === 'function' ? (\n          <Content onClose={handleClose} />\n        ) : (\n          <Modal.Body>{Content}</Modal.Body>\n        )}\n        {typeof Footer === 'function' ? <Footer onClose={handleClose} /> : Footer}\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nconst transformData = (data: Record<string, any>): any => {\n  if (Array.isArray(data)) {\n    return data.map(transformData);\n  }\n\n  if (typeof data === 'object' && data !== null) {\n    if ('apiData' in data) {\n      return data.apiData;\n    }\n\n    return mapValues(transformData)(data);\n  }\n\n  return data;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionComponents\n * -----------------------------------------------------------------------------------------------*/\n\nconst PublishAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  meta,\n  document,\n  onPreview,\n  fromPreview = false,\n  fromRelationModal = false,\n}) => {\n  const schema = useDocumentContext('PublishAction', (state) => state.document.schema);\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\n  const isListView = useMatch(LIST_PATH) !== null;\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const { id } = useParams();\n  const { formatMessage } = useIntl();\n  const canPublish = useDocumentRBAC('PublishAction', ({ canPublish }) => canPublish);\n  const { publish, isLoading } = useDocumentActions(fromPreview, fromRelationModal);\n  const [\n    countDraftRelations,\n    { isLoading: isLoadingDraftRelations, isError: isErrorDraftRelations },\n  ] = useGetDraftRelationCountQuery();\n  const [localCountOfDraftRelations, setLocalCountOfDraftRelations] = React.useState(0);\n  const [serverCountOfDraftRelations, setServerCountOfDraftRelations] = React.useState(0);\n\n  const [{ query, rawQuery }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const modified = useForm('PublishAction', ({ modified }) => modified);\n  const setSubmitting = useForm('PublishAction', ({ setSubmitting }) => setSubmitting);\n  const isSubmitting = useForm('PublishAction', ({ isSubmitting }) => isSubmitting);\n  const validate = useForm('PublishAction', (state) => state.validate);\n  const setErrors = useForm('PublishAction', (state) => state.setErrors);\n  const formValues = useForm('PublishAction', ({ values }) => values);\n\n  const rootDocumentMeta = useDocumentContext('PublishAction', (state) => state.rootDocumentMeta);\n  const currentDocumentMeta = useDocumentContext('PublishAction', (state) => state.meta);\n\n  React.useEffect(() => {\n    if (isErrorDraftRelations) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: getTranslation('error.records.fetch-draft-relatons'),\n          defaultMessage: 'An error occurred while fetching draft relations on this document.',\n        }),\n      });\n    }\n  }, [isErrorDraftRelations, toggleNotification, formatMessage]);\n\n  React.useEffect(() => {\n    const localDraftRelations = new Set();\n\n    /**\n     * Extracts draft relations from the provided data object.\n     * It checks for a connect array of relations.\n     * If a relation has a status of 'draft', its id is added to the localDraftRelations set.\n     */\n    const extractDraftRelations = (data: Omit<RelationsFormValue, 'disconnect'>) => {\n      const relations = data.connect || [];\n      relations.forEach((relation) => {\n        if (relation.status === 'draft') {\n          localDraftRelations.add(relation.id);\n        }\n      });\n    };\n\n    /**\n     * Recursively traverses the provided data object to extract draft relations from arrays within 'connect' keys.\n     * If the data is an object, it looks for 'connect' keys to pass their array values to extractDraftRelations.\n     * It recursively calls itself for any non-null objects it contains.\n     */\n    const traverseAndExtract = (data: { [field: string]: any }) => {\n      Object.entries(data).forEach(([key, value]) => {\n        if (key === 'connect' && Array.isArray(value)) {\n          extractDraftRelations({ connect: value });\n        } else if (typeof value === 'object' && value !== null) {\n          traverseAndExtract(value);\n        }\n      });\n    };\n\n    if (!documentId || modified) {\n      traverseAndExtract(formValues);\n      setLocalCountOfDraftRelations(localDraftRelations.size);\n    }\n  }, [documentId, modified, formValues, setLocalCountOfDraftRelations]);\n\n  React.useEffect(() => {\n    if (!document || !document.documentId || isListView) {\n      return;\n    }\n\n    const fetchDraftRelationsCount = async () => {\n      const { data, error } = await countDraftRelations({\n        collectionType,\n        model,\n        documentId,\n        params,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      if (data) {\n        setServerCountOfDraftRelations(data.data);\n      }\n    };\n\n    fetchDraftRelationsCount();\n  }, [isListView, document, documentId, countDraftRelations, collectionType, model, params]);\n\n  const isDocumentPublished =\n    (document?.[PUBLISHED_AT_ATTRIBUTE_NAME] ||\n      meta?.availableStatus.some((doc) => doc[PUBLISHED_AT_ATTRIBUTE_NAME] !== null)) &&\n    document?.status !== 'modified';\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  const performPublish = async () => {\n    setSubmitting(true);\n\n    try {\n      const { errors } = await validate(true, {\n        status: 'published',\n      });\n\n      if (errors) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'content-manager.validation.error',\n            defaultMessage:\n              'There are validation errors in your document. Please fix them before saving.',\n          }),\n        });\n\n        return;\n      }\n\n      const isPublishingRelation = rootDocumentMeta.documentId !== currentDocumentMeta.documentId;\n      const res = await publish(\n        {\n          collectionType,\n          model,\n          documentId,\n          params: isPublishingRelation ? currentDocumentMeta.params : params,\n        },\n        transformData(formValues)\n      );\n\n      if ('data' in res && collectionType !== SINGLE_TYPES) {\n        /**\n         * TODO: refactor the router so we can just do `../${res.data.documentId}` instead of this.\n         */\n        if (id === 'create') {\n          navigate({\n            pathname: `../${collectionType}/${model}/${res.data.documentId}`,\n            search: rawQuery,\n          });\n        }\n      } else if (\n        'error' in res &&\n        isBaseQueryError(res.error) &&\n        res.error.name === 'ValidationError'\n      ) {\n        setErrors(formatValidationErrors(res.error));\n      }\n    } finally {\n      setSubmitting(false);\n\n      if (onPreview) {\n        onPreview();\n      }\n    }\n  };\n\n  const totalDraftRelations = localCountOfDraftRelations + serverCountOfDraftRelations;\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\n  // see RFC \"Count draft relations\" in Notion\n  const enableDraftRelationsCount = false;\n  const hasDraftRelations = enableDraftRelationsCount && totalDraftRelations > 0;\n\n  return {\n    loading: isLoading,\n    position: ['panel', 'preview', 'relation-modal'],\n    /**\n     * Disabled when:\n     *  - currently if you're cloning a document we don't support publish & clone at the same time.\n     *  - the form is submitting\n     *  - the active tab is the published tab\n     *  - the document is already published & not modified\n     *  - the document is being created & not modified\n     *  - the user doesn't have the permission to publish\n     */\n    disabled:\n      isCloning ||\n      isSubmitting ||\n      isLoadingDraftRelations ||\n      activeTab === 'published' ||\n      (!modified && isDocumentPublished) ||\n      (!modified && !document?.documentId) ||\n      !canPublish,\n    label: formatMessage({\n      id: 'app.utils.publish',\n      defaultMessage: 'Publish',\n    }),\n    onClick: async () => {\n      if (hasDraftRelations) {\n        // In this case we need to show the user a confirmation dialog.\n        // Return from the onClick and let the dialog handle the process.\n        return;\n      }\n\n      await performPublish();\n    },\n    dialog: hasDraftRelations\n      ? {\n          type: 'dialog',\n          variant: 'danger',\n          footer: null,\n          title: formatMessage({\n            id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.title`),\n            defaultMessage: 'Confirmation',\n          }),\n          content: formatMessage(\n            {\n              id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.message`),\n              defaultMessage:\n                'This entry is related to {count, plural, one {# draft entry} other {# draft entries}}. Publishing it could leave broken links in your app.',\n            },\n            {\n              count: totalDraftRelations,\n            }\n          ),\n          onConfirm: async () => {\n            await performPublish();\n          },\n        }\n      : undefined,\n  };\n};\n\nPublishAction.type = 'publish';\nPublishAction.position = ['panel', 'preview', 'relation-modal'];\n\nconst UpdateAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  onPreview,\n  fromPreview = false,\n  fromRelationModal = false,\n}) => {\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\n  const cloneMatch = useMatch(CLONE_PATH);\n  const isCloning = cloneMatch !== null;\n  const { formatMessage } = useIntl();\n  const { create, update, clone, isLoading } = useDocumentActions(fromPreview, fromRelationModal);\n  const [{ query, rawQuery }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const isSubmitting = useForm('UpdateAction', ({ isSubmitting }) => isSubmitting);\n  const modified = useForm('UpdateAction', ({ modified }) => modified);\n  const setSubmitting = useForm('UpdateAction', ({ setSubmitting }) => setSubmitting);\n  const document = useForm('UpdateAction', ({ values }) => values);\n  const validate = useForm('UpdateAction', (state) => state.validate);\n  const setErrors = useForm('UpdateAction', (state) => state.setErrors);\n  const resetForm = useForm('PublishAction', ({ resetForm }) => resetForm);\n\n  const rootDocumentMeta = useDocumentContext('UpdateAction', (state) => state.rootDocumentMeta);\n  const currentDocumentMeta = useDocumentContext('UpdateAction', (state) => state.meta);\n\n  const handleUpdate = React.useCallback(async () => {\n    setSubmitting(true);\n\n    try {\n      if (!modified) {\n        return;\n      }\n\n      const { errors } = await validate(true, {\n        status: 'draft',\n      });\n\n      if (errors) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'content-manager.validation.error',\n            defaultMessage:\n              'There are validation errors in your document. Please fix them before saving.',\n          }),\n        });\n\n        return;\n      }\n\n      if (isCloning) {\n        const res = await clone(\n          {\n            model,\n            documentId: cloneMatch.params.origin!,\n            params,\n          },\n          transformData(document)\n        );\n\n        if ('data' in res) {\n          navigate(\n            {\n              pathname: `../${res.data.documentId}`,\n              search: rawQuery,\n            },\n            { relative: 'path' }\n          );\n        } else if (\n          'error' in res &&\n          isBaseQueryError(res.error) &&\n          res.error.name === 'ValidationError'\n        ) {\n          setErrors(formatValidationErrors(res.error));\n        }\n      } else if (documentId || collectionType === SINGLE_TYPES) {\n        const isEditingRelation = rootDocumentMeta.documentId !== currentDocumentMeta.documentId;\n\n        const res = await update(\n          {\n            collectionType,\n            model,\n            documentId,\n            params: isEditingRelation ? currentDocumentMeta.params : params,\n          },\n          transformData(document)\n        );\n\n        if ('error' in res && isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          setErrors(formatValidationErrors(res.error));\n        } else {\n          resetForm();\n        }\n      } else {\n        const res = await create(\n          {\n            model,\n            params,\n          },\n          transformData(document)\n        );\n\n        if ('data' in res && collectionType !== SINGLE_TYPES) {\n          navigate(\n            {\n              pathname: `../${res.data.documentId}`,\n              search: rawQuery,\n            },\n            { replace: true, relative: 'path' }\n          );\n        } else if (\n          'error' in res &&\n          isBaseQueryError(res.error) &&\n          res.error.name === 'ValidationError'\n        ) {\n          setErrors(formatValidationErrors(res.error));\n        }\n      }\n    } finally {\n      setSubmitting(false);\n      if (onPreview) {\n        onPreview();\n      }\n    }\n  }, [\n    clone,\n    cloneMatch?.params.origin,\n    collectionType,\n    create,\n    currentDocumentMeta.documentId,\n    currentDocumentMeta.params,\n    document,\n    documentId,\n    formatMessage,\n    formatValidationErrors,\n    isCloning,\n    model,\n    modified,\n    navigate,\n    onPreview,\n    params,\n    rawQuery,\n    resetForm,\n    rootDocumentMeta.documentId,\n    setErrors,\n    setSubmitting,\n    toggleNotification,\n    update,\n    validate,\n  ]);\n\n  // Auto-save on CMD+S or CMD+Enter on macOS, and CTRL+S or CTRL+Enter on Windows/Linux\n  React.useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        handleUpdate();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleUpdate]);\n\n  return {\n    loading: isLoading,\n    /**\n     * Disabled when:\n     * - the form is submitting\n     * - the document is not modified & we're not cloning (you can save a clone entity straight away)\n     * - the active tab is the published tab\n     */\n    disabled: isSubmitting || (!modified && !isCloning) || activeTab === 'published',\n    label: formatMessage({\n      id: 'global.save',\n      defaultMessage: 'Save',\n    }),\n    onClick: handleUpdate,\n    position: ['panel', 'preview', 'relation-modal'],\n  };\n};\n\nUpdateAction.type = 'update';\nUpdateAction.position = ['panel', 'preview', 'relation-modal'];\n\nconst UNPUBLISH_DRAFT_OPTIONS = {\n  KEEP: 'keep',\n  DISCARD: 'discard',\n};\n\nconst UnpublishAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  document,\n}) => {\n  const { formatMessage } = useIntl();\n  const { schema } = useDoc();\n  const canPublish = useDocumentRBAC('UnpublishAction', ({ canPublish }) => canPublish);\n  const { unpublish } = useDocumentActions();\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const { toggleNotification } = useNotification();\n  const [shouldKeepDraft, setShouldKeepDraft] = React.useState(true);\n\n  const isDocumentModified = document?.status === 'modified';\n\n  const handleChange = (value: string) => {\n    setShouldKeepDraft(value === UNPUBLISH_DRAFT_OPTIONS.KEEP);\n  };\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  return {\n    disabled:\n      !canPublish ||\n      activeTab === 'published' ||\n      (document?.status !== 'published' && document?.status !== 'modified'),\n    label: formatMessage({\n      id: 'app.utils.unpublish',\n      defaultMessage: 'Unpublish',\n    }),\n    icon: <Cross />,\n    onClick: async () => {\n      /**\n       * return if there's no id & we're in a collection type, or the status modified\n       * for either collection type because we use a dialog to handle the process in\n       * the latter case.\n       */\n      if ((!documentId && collectionType !== SINGLE_TYPES) || isDocumentModified) {\n        if (!documentId) {\n          // This should never, ever, happen.\n          console.error(\n            \"You're trying to unpublish a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n          );\n\n          toggleNotification({\n            message: formatMessage({\n              id: 'content-manager.actions.unpublish.error',\n              defaultMessage: 'An error occurred while trying to unpublish the document.',\n            }),\n            type: 'danger',\n          });\n        }\n\n        return;\n      }\n\n      await unpublish({\n        collectionType,\n        model,\n        documentId,\n        params,\n      });\n    },\n    dialog: isDocumentModified\n      ? {\n          type: 'dialog',\n          title: formatMessage({\n            id: 'app.components.ConfirmDialog.title',\n            defaultMessage: 'Confirmation',\n          }),\n          content: (\n            <Flex alignItems=\"flex-start\" direction=\"column\" gap={6}>\n              <Flex width=\"100%\" direction=\"column\" gap={2}>\n                <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n                <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n                  {formatMessage({\n                    id: 'content-manager.actions.unpublish.dialog.body',\n                    defaultMessage: 'Are you sure?',\n                  })}\n                </Typography>\n              </Flex>\n              <Radio.Group\n                defaultValue={UNPUBLISH_DRAFT_OPTIONS.KEEP}\n                name=\"discard-options\"\n                aria-label={formatMessage({\n                  id: 'content-manager.actions.unpublish.dialog.radio-label',\n                  defaultMessage: 'Choose an option to unpublish the document.',\n                })}\n                onValueChange={handleChange}\n              >\n                <Radio.Item checked={shouldKeepDraft} value={UNPUBLISH_DRAFT_OPTIONS.KEEP}>\n                  {formatMessage({\n                    id: 'content-manager.actions.unpublish.dialog.option.keep-draft',\n                    defaultMessage: 'Keep draft',\n                  })}\n                </Radio.Item>\n                <Radio.Item checked={!shouldKeepDraft} value={UNPUBLISH_DRAFT_OPTIONS.DISCARD}>\n                  {formatMessage({\n                    id: 'content-manager.actions.unpublish.dialog.option.replace-draft',\n                    defaultMessage: 'Replace draft',\n                  })}\n                </Radio.Item>\n              </Radio.Group>\n            </Flex>\n          ),\n          onConfirm: async () => {\n            if (!documentId && collectionType !== SINGLE_TYPES) {\n              // This should never, ever, happen.\n              console.error(\n                \"You're trying to unpublish a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n              );\n\n              toggleNotification({\n                message: formatMessage({\n                  id: 'content-manager.actions.unpublish.error',\n                  defaultMessage: 'An error occurred while trying to unpublish the document.',\n                }),\n                type: 'danger',\n              });\n            }\n\n            await unpublish(\n              {\n                collectionType,\n                model,\n                documentId,\n                params,\n              },\n              !shouldKeepDraft\n            );\n          },\n        }\n      : undefined,\n    variant: 'danger',\n    position: ['panel', 'table-row'],\n  };\n};\n\nUnpublishAction.type = 'unpublish';\nUnpublishAction.position = 'panel';\n\nconst DiscardAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  document,\n}) => {\n  const { formatMessage } = useIntl();\n  const { schema } = useDoc();\n  const canUpdate = useDocumentRBAC('DiscardAction', ({ canUpdate }) => canUpdate);\n  const { discard, isLoading } = useDocumentActions();\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  return {\n    disabled: !canUpdate || activeTab === 'published' || document?.status !== 'modified',\n    label: formatMessage({\n      id: 'content-manager.actions.discard.label',\n      defaultMessage: 'Discard changes',\n    }),\n    icon: <Cross />,\n    position: ['panel', 'table-row'],\n    variant: 'danger',\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" gap={2}>\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n            {formatMessage({\n              id: 'content-manager.actions.discard.dialog.body',\n              defaultMessage: 'Are you sure?',\n            })}\n          </Typography>\n        </Flex>\n      ),\n      loading: isLoading,\n      onConfirm: async () => {\n        await discard({\n          collectionType,\n          model,\n          documentId,\n          params,\n        });\n      },\n    },\n  };\n};\n\nDiscardAction.type = 'discard';\nDiscardAction.position = 'panel';\n\nconst DEFAULT_ACTIONS = [PublishAction, UpdateAction, UnpublishAction, DiscardAction];\n\nexport { DocumentActions, DocumentActionsMenu, DocumentActionButton, DEFAULT_ACTIONS };\nexport type {\n  DocumentActionDescription,\n  DocumentActionPosition,\n  DialogOptions,\n  NotificationOptions,\n  ModalOptions,\n};\n"],
  "mappings": "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",
  "names": ["require_mapValues", "PLUGIN_ID", "PERMISSIONS", "DocumentProvider", "useDocumentContext", "createContext", "DocumentContextProvider", "children", "initialDocument", "onPreview", "currentDocumentMeta", "changeDocument", "useState", "params", "useMemo", "buildValidParams", "document", "useDocument", "documentHistory", "setDocumentHistory", "_jsx", "rootDocumentMeta", "documentId", "model", "collectionType", "meta", "DocumentRBACProvider", "useDocumentRBAC", "createContext", "canCreate", "canCreateFields", "canDelete", "canPublish", "canRead", "canReadFields", "canUpdate", "canUpdateFields", "canUserAction", "isLoading", "DocumentRBAC", "children", "permissions", "model", "slug", "useParams", "Error", "contentTypeUid", "rawQuery", "useQueryParams", "userPermissions", "useAuth", "state", "contentTypePermissions", "useMemo", "filter", "permission", "subject", "reduce", "acc", "action", "split", "slice", "allowedActions", "useRBAC", "undefined", "extractAndDedupeFields", "create", "read", "update", "useCallback", "fieldName", "fieldsUserCanAction", "fieldType", "name", "removeNumericalStrings", "componentFieldNames", "field", "length", "some", "includes", "join", "_jsx", "Page", "Loading", "flatMap", "properties", "fields", "index", "arr", "indexOf", "item", "isNaN", "Number", "DEFAULT_UNEXPECTED_ERROR_MSG", "id", "defaultMessage", "useDocumentActions", "fromPreview", "fromRelationModal", "toggleNotification", "useNotification", "formatMessage", "useIntl", "trackUsage", "useTracking", "_unstableFormatAPIError", "formatAPIError", "useAPIErrorHandler", "navigate", "useNavigate", "setCurrentStep", "useGuidedTour", "state", "deleteDocument", "isLoading", "isDeleting", "useDeleteDocumentMutation", "_delete", "useCallback", "collectionType", "model", "documentId", "params", "trackerProperty", "res", "type", "message", "error", "getTranslation", "data", "err", "deleteManyDocuments", "isDeletingMany", "useDeleteManyDocumentsMutation", "deleteMany", "documentIds", "title", "discardDocument", "isDiscardingDocument", "useDiscardDocumentMutation", "discard", "publishDocument", "isPublishing", "usePublishDocumentMutation", "publish", "publishManyDocuments", "isPublishingMany", "usePublishManyDocumentsMutation", "publishMany", "updateDocument", "isUpdating", "useUpdateDocumentMutation", "update", "unpublishDocument", "useUnpublishDocumentMutation", "unpublish", "discardDraft", "unpublishManyDocuments", "isUnpublishingMany", "useUnpublishManyDocumentsMutation", "unpublishMany", "createDocument", "useCreateDocumentMutation", "create", "autoCloneDocument", "useAutoCloneDocumentMutation", "autoClone", "sourceId", "cloneDocument", "useCloneDocumentMutation", "clone", "body", "_id", "restBody", "relative", "getDoc", "useLazyGetDocumentQuery", "getDocument", "args", "delete", "DocumentStatus", "status", "size", "restProps", "statusVariant", "formatMessage", "useIntl", "_jsx", "Status", "variant", "role", "aria-label", "Typography", "tag", "fontWeight", "id", "defaultMessage", "capitalise", "ProtectedHistoryPage", "lazy", "then", "mod", "default", "routes", "path", "Component", "ProtectedPreviewPage", "lazy", "then", "mod", "default", "routes", "path", "Component", "ProtectedEditViewPage", "lazy", "then", "mod", "default", "ProtectedListViewPage", "ProtectedListConfiguration", "ProtectedEditConfigurationPage", "ProtectedComponentConfigurationPage", "NoPermissions", "NoContentType", "CollectionTypePages", "collectionType", "useParams", "COLLECTION_TYPES", "SINGLE_TYPES", "_jsx", "Navigate", "to", "CLONE_RELATIVE_PATH", "CLONE_PATH", "LIST_RELATIVE_PATH", "LIST_PATH", "routes", "path", "element", "Component", "historyRoutes", "previewRoutes", "DocumentActions", "actions", "formatMessage", "useIntl", "primaryAction", "secondaryAction", "restActions", "filter", "action", "position", "undefined", "positions", "Array", "isArray", "includes", "_jsxs", "Flex", "direction", "gap", "alignItems", "width", "_jsx", "DocumentActionButton", "variant", "length", "DocumentActionsMenu", "label", "id", "defaultMessage", "dialogId", "setDialogId", "useState", "toggleNotification", "useNotification", "handleClick", "e", "onClick", "dialog", "muteDialog", "type", "title", "message", "content", "status", "timeout", "onClose", "preventDefault", "handleClose", "_Fragment", "Button", "flex", "startIcon", "icon", "disabled", "justifyContent", "paddingTop", "paddingBottom", "loading", "DocumentActionConfirmDialog", "isOpen", "DocumentActionModal", "onModalClose", "MenuItem", "styled", "Menu", "Item", "theme", "isVariantDanger", "isDisabled", "colors", "danger100", "children", "setIsOpen", "every", "Root", "open", "onOpenChange", "Trigger", "size", "endIcon", "paddingLeft", "paddingRight", "More", "aria-hidden", "focusable", "VisuallyHidden", "tag", "Content", "maxHeight", "popoverPlacement", "map", "onSelect", "display", "color", "convertActionVariantToColor", "convertActionVariantToIconColor", "Fragment", "onCancel", "onConfirm", "handleConfirm", "Dialog", "Header", "Body", "Footer", "Cancel", "fullWidth", "footer", "Modal", "Title", "transformData", "data", "apiData", "mapValues", "PublishAction", "activeTab", "documentId", "model", "collectionType", "meta", "document", "onPreview", "fromPreview", "fromRelationModal", "schema", "useDocumentContext", "state", "navigate", "useNavigate", "_unstableFormatValidationErrors", "formatValidationErrors", "useAPIErrorHandler", "isListView", "useMatch", "LIST_PATH", "isCloning", "CLONE_PATH", "useParams", "canPublish", "useDocumentRBAC", "publish", "isLoading", "useDocumentActions", "countDraftRelations", "isLoadingDraftRelations", "isError", "isErrorDraftRelations", "useGetDraftRelationCountQuery", "localCountOfDraftRelations", "setLocalCountOfDraftRelations", "serverCountOfDraftRelations", "setServerCountOfDraftRelations", "query", "rawQuery", "useQueryParams", "params", "useMemo", "buildValidParams", "modified", "useForm", "setSubmitting", "isSubmitting", "validate", "setErrors", "formValues", "values", "rootDocumentMeta", "currentDocumentMeta", "React", "useEffect", "getTranslation", "localDraftRelations", "Set", "extractDraftRelations", "relations", "connect", "forEach", "relation", "add", "traverseAndExtract", "Object", "entries", "key", "value", "fetchDraftRelationsCount", "error", "isDocumentPublished", "PUBLISHED_AT_ATTRIBUTE_NAME", "availableStatus", "some", "doc", "options", "draftAndPublish", "performPublish", "errors", "isPublishingRelation", "res", "SINGLE_TYPES", "pathname", "search", "isBaseQueryError", "name", "totalDraftRelations", "enableDraftRelationsCount", "hasDraftRelations", "count", "UpdateAction", "cloneMatch", "create", "update", "clone", "resetForm", "handleUpdate", "useCallback", "origin", "relative", "isEditingRelation", "replace", "handleKeyDown", "metaKey", "ctrlKey", "window", "addEventListener", "removeEventListener", "UNPUBLISH_DRAFT_OPTIONS", "KEEP", "DISCARD", "UnpublishAction", "useDoc", "unpublish", "shouldKeepDraft", "setShouldKeepDraft", "isDocumentModified", "handleChange", "Cross", "console", "WarningCircle", "height", "fill", "Typography", "textAlign", "Radio", "Group", "defaultValue", "aria-label", "onValueChange", "checked", "DiscardAction", "canUpdate", "discard", "DEFAULT_ACTIONS"]
}
