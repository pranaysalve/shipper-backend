import {
  contentManagerApi
} from "./chunk-JIFANRG6.js";
import {
  generateNKeysBetween
} from "./chunk-W2EBIS6P.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-manager/dist/admin/hooks/usePrev.mjs
var import_react = __toESM(require_react(), 1);
var usePrev = (value) => {
  const ref = (0, import_react.useRef)();
  (0, import_react.useEffect)(() => {
    ref.current = value;
  }, [
    value
  ]);
  return ref.current;
};

// node_modules/@strapi/content-manager/dist/admin/hooks/useDebounce.mjs
var import_react2 = __toESM(require_react(), 1);
function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = (0, import_react2.useState)(value);
  (0, import_react2.useEffect)(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [
    value,
    delay
  ]);
  return debouncedValue;
}

// node_modules/@strapi/content-manager/dist/admin/utils/urls.mjs
var prefixFileUrlWithBackendUrl = (fileURL) => {
  return !!fileURL && fileURL.startsWith("/") ? `${window.strapi.backendURL}${fileURL}` : fileURL;
};

// node_modules/@strapi/content-manager/dist/admin/services/relations.mjs
var relationsApi = contentManagerApi.injectEndpoints({
  endpoints: (build) => ({
    getRelations: build.query({
      query: ({ model, id, targetField, params }) => {
        return {
          url: `/content-manager/relations/${model}/${id}/${targetField}`,
          method: "GET",
          config: {
            params
          }
        };
      },
      serializeQueryArgs: (args) => {
        var _a, _b;
        const { endpointName, queryArgs } = args;
        return {
          endpointName,
          model: queryArgs.model,
          id: queryArgs.id,
          targetField: queryArgs.targetField,
          locale: (_a = queryArgs.params) == null ? void 0 : _a.locale,
          status: (_b = queryArgs.params) == null ? void 0 : _b.status
        };
      },
      merge: (currentCache, newItems) => {
        if (currentCache.pagination && newItems.pagination) {
          if (currentCache.pagination.page < newItems.pagination.page) {
            currentCache.results = [
              ...prepareTempKeys(newItems.results, currentCache.results),
              ...currentCache.results
            ];
            currentCache.pagination = newItems.pagination;
          } else if (newItems.pagination.page === 1) {
            currentCache.results = prepareTempKeys(newItems.results);
            currentCache.pagination = newItems.pagination;
          }
        }
      },
      forceRefetch({ currentArg, previousArg }) {
        var _a, _b, _c, _d;
        if (!(currentArg == null ? void 0 : currentArg.params) && !(previousArg == null ? void 0 : previousArg.params)) {
          return false;
        }
        return ((_a = currentArg == null ? void 0 : currentArg.params) == null ? void 0 : _a.page) !== ((_b = previousArg == null ? void 0 : previousArg.params) == null ? void 0 : _b.page) || ((_c = currentArg == null ? void 0 : currentArg.params) == null ? void 0 : _c.pageSize) !== ((_d = previousArg == null ? void 0 : previousArg.params) == null ? void 0 : _d.pageSize);
      },
      transformResponse: (response) => {
        if ("results" in response && response.results) {
          return {
            ...response,
            results: prepareTempKeys(response.results.toReversed())
          };
        } else {
          return response;
        }
      },
      providesTags: [
        "Relations"
      ]
    }),
    searchRelations: build.query({
      query: ({ model, targetField, params }) => {
        return {
          url: `/content-manager/relations/${model}/${targetField}`,
          method: "GET",
          config: {
            params
          }
        };
      },
      serializeQueryArgs: (args) => {
        var _a, _b, _c;
        const { endpointName, queryArgs } = args;
        return {
          endpointName,
          model: queryArgs.model,
          targetField: queryArgs.targetField,
          _q: (_a = queryArgs.params) == null ? void 0 : _a._q,
          idsToOmit: (_b = queryArgs.params) == null ? void 0 : _b.idsToOmit,
          idsToInclude: (_c = queryArgs.params) == null ? void 0 : _c.idsToInclude
        };
      },
      merge: (currentCache, newItems) => {
        if (currentCache.pagination && newItems.pagination) {
          if (currentCache.pagination.page < newItems.pagination.page) {
            const existingIds = currentCache.results.map((item) => item.documentId);
            const uniqueNewItems = newItems.results.filter((item) => !existingIds.includes(item.documentId));
            currentCache.results.push(...uniqueNewItems);
            currentCache.pagination = newItems.pagination;
          } else if (newItems.pagination.page === 1) {
            currentCache.results = newItems.results;
            currentCache.pagination = newItems.pagination;
          }
        }
      },
      forceRefetch({ currentArg, previousArg }) {
        var _a, _b, _c, _d;
        if (!(currentArg == null ? void 0 : currentArg.params) && !(previousArg == null ? void 0 : previousArg.params)) {
          return false;
        }
        return ((_a = currentArg == null ? void 0 : currentArg.params) == null ? void 0 : _a.page) !== ((_b = previousArg == null ? void 0 : previousArg.params) == null ? void 0 : _b.page) || ((_c = currentArg == null ? void 0 : currentArg.params) == null ? void 0 : _c.pageSize) !== ((_d = previousArg == null ? void 0 : previousArg.params) == null ? void 0 : _d.pageSize);
      },
      transformResponse: (response) => {
        if (response.results) {
          return {
            ...response,
            results: response.results
          };
        } else {
          return response;
        }
      }
    })
  })
});
var prepareTempKeys = (relations, existingRelations = []) => {
  const [firstItem] = existingRelations.slice(0);
  const keys = generateNKeysBetween(null, (firstItem == null ? void 0 : firstItem.__temp_key__) ?? null, relations.length);
  return relations.map((datum, index) => ({
    ...datum,
    __temp_key__: keys[index]
  }));
};
var { useGetRelationsQuery, useLazySearchRelationsQuery } = relationsApi;

// node_modules/@strapi/content-manager/dist/admin/utils/relations.mjs
var getRelationLabel = (relation, mainField) => {
  const label = mainField && relation[mainField.name] ? relation[mainField.name] : null;
  if (typeof label === "string") {
    return label;
  }
  return relation.documentId;
};

export {
  prefixFileUrlWithBackendUrl,
  useDebounce,
  useGetRelationsQuery,
  useLazySearchRelationsQuery,
  getRelationLabel,
  usePrev
};
//# sourceMappingURL=chunk-3KM43LT6.js.map
