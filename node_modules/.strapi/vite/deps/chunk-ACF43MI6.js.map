{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/components/InjectionZone.tsx"],
  "sourcesContent": ["import { useStrapiApp, InjectionZoneComponent } from '@strapi/admin/strapi-admin';\n\nimport { PLUGIN_ID } from '../constants/plugin';\n\nconst INJECTION_ZONES = {\n  editView: { informations: [], 'right-links': [] },\n  listView: {\n    actions: [],\n    deleteModalAdditionalInfos: [],\n    publishModalAdditionalInfos: [],\n    unpublishModalAdditionalInfos: [],\n  },\n  preview: {\n    actions: [],\n  },\n} satisfies InjectionZones;\n\ninterface InjectionZones {\n  editView: {\n    informations: InjectionZoneComponent[];\n    'right-links': InjectionZoneComponent[];\n  };\n  listView: {\n    actions: InjectionZoneComponent[];\n    deleteModalAdditionalInfos: InjectionZoneComponent[];\n    publishModalAdditionalInfos: InjectionZoneComponent[];\n    unpublishModalAdditionalInfos: InjectionZoneComponent[];\n  };\n  preview: {\n    actions: InjectionZoneComponent[];\n  };\n}\n\ntype InjectionZoneArea =\n  | 'editView.informations'\n  | 'editView.right-links'\n  | 'listView.actions'\n  | 'listView.unpublishModalAdditionalInfos'\n  | 'listView.deleteModalAdditionalInfos'\n  | 'listView.publishModalAdditionalInfos'\n  | 'listView.deleteModalAdditionalInfos'\n  | 'preview.actions';\n\ntype InjectionZoneModule = InjectionZoneArea extends `${infer Word}.${string}` ? Word : never;\ntype InjectionZoneContainer = InjectionZoneArea extends `${string}.${infer Word}.${string}`\n  ? Word\n  : never;\ntype InjectionZoneBlock = InjectionZoneArea extends `${string}.${string}.${infer Word}`\n  ? Word\n  : never;\n\n/**\n * You can't know what this component props will be because it's generic and used everywhere\n * e.g. content-manager edit view, we just send the slug but we might not in the listView,\n * therefore, people should type it themselves on the components they render.\n */\nconst InjectionZone = ({ area, ...props }: { area: InjectionZoneArea; [key: string]: unknown }) => {\n  const components = useInjectionZone(area);\n\n  return (\n    <>\n      {components.map((component) => (\n        <component.Component key={component.name} {...props} />\n      ))}\n    </>\n  );\n};\n\nexport const useInjectionZone = (area: InjectionZoneArea) => {\n  const getPlugin = useStrapiApp('useInjectionZone', (state) => state.getPlugin);\n  const contentManagerPlugin = getPlugin(PLUGIN_ID);\n  const [page, position] = area.split('.') as [InjectionZoneContainer, InjectionZoneBlock];\n\n  return contentManagerPlugin.getInjectedComponents(page, position);\n};\n\nexport { InjectionZone, INJECTION_ZONES };\n\nexport type {\n  InjectionZoneArea,\n  InjectionZoneComponent,\n  InjectionZones,\n  InjectionZoneModule,\n  InjectionZoneContainer,\n  InjectionZoneBlock,\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;AAIA,IAAMA,kBAAkB;EACtBC,UAAU;IAAEC,cAAc,CAAA;IAAI,eAAe,CAAA;EAAG;EAChDC,UAAU;IACRC,SAAS,CAAA;IACTC,4BAA4B,CAAA;IAC5BC,6BAA6B,CAAA;IAC7BC,+BAA+B,CAAA;EACjC;EACAC,SAAS;IACPJ,SAAS,CAAA;EACX;AACF;AAwCC,IACKK,gBAAgB,CAAC,EAAEC,MAAM,GAAGC,MAA4D,MAAA;AAC5F,QAAMC,aAAaC,iBAAiBH,IAAAA;AAEpC,aACEI,wBAAAC,6BAAA;IACGH,UAAAA,WAAWI,IAAI,CAACC,kBACfH,wBAACG,UAAUC,WAAS;MAAuB,GAAGP;IAApBM,GAAAA,UAAUE,IAAI,CAAA;;AAIhD;AAEO,IAAMN,mBAAmB,CAACH,SAAAA;AAC/B,QAAMU,YAAYC,aAAa,oBAAoB,CAACC,UAAUA,MAAMF,SAAS;AAC7E,QAAMG,uBAAuBH,UAAUI,SAAAA;AACvC,QAAM,CAACC,MAAMC,QAAAA,IAAYhB,KAAKiB,MAAM,GAAA;AAEpC,SAAOJ,qBAAqBK,sBAAsBH,MAAMC,QAAAA;AAC1D;",
  "names": ["INJECTION_ZONES", "editView", "informations", "listView", "actions", "deleteModalAdditionalInfos", "publishModalAdditionalInfos", "unpublishModalAdditionalInfos", "preview", "InjectionZone", "area", "props", "components", "useInjectionZone", "_jsx", "_Fragment", "map", "component", "Component", "name", "getPlugin", "useStrapiApp", "state", "contentManagerPlugin", "PLUGIN_ID", "page", "position", "split", "getInjectedComponents"]
}
