{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/preview/components/PreviewHeader.tsx", "../../../@strapi/content-manager/admin/src/preview/pages/Preview.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport {\n  DescriptionComponentRenderer,\n  useClipboard,\n  useHistory,\n  useNotification,\n  useQueryParams,\n  useStrapiApp,\n} from '@strapi/admin/strapi-admin';\nimport { IconButton, Tabs, Typography, Flex } from '@strapi/design-system';\nimport { Cross, Link as LinkIcon } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link, type To } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { InjectionZone } from '../../components/InjectionZone';\nimport { useDocumentContext } from '../../features/DocumentContext';\nimport { DocumentActionButton } from '../../pages/EditView/components/DocumentActions';\nimport { DocumentStatus } from '../../pages/EditView/components/DocumentStatus';\nimport { getDocumentStatus } from '../../pages/EditView/EditViewPage';\nimport { usePreviewContext } from '../pages/Preview';\n\nimport type { ContentManagerPlugin, DocumentActionProps } from '../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * ClosePreviewButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst ClosePreviewButton = () => {\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n  }>();\n  const { formatMessage } = useIntl();\n\n  const canGoBack = useHistory('BackButton', (state) => state.canGoBack);\n  const goBack = useHistory('BackButton', (state) => state.goBack);\n  const history = useHistory('BackButton', (state) => state.history);\n  const locationIndex = useHistory('BackButton', (state) => state.currentLocationIndex);\n\n  /**\n   * Get the link destination from the history.\n   * Rely on a fallback (the parent edit view page) if there's no page to go back .\n   */\n  const historyTo = canGoBack ? history.at(locationIndex - 2) : undefined;\n  const fallback = {\n    pathname: '..',\n    search: stringify(query, { encode: false }),\n  } satisfies To;\n  const toWithFallback = historyTo ?? fallback;\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (canGoBack) {\n      // Prevent normal link behavior, go back in the history stack instead\n      e.preventDefault();\n      goBack();\n      return;\n    }\n\n    // Otherwise rely on native link behavior to go back to the edit view. We don't use navigate()\n    // here in order to get the relative=\"path\" functionality from the Link component.\n  };\n\n  return (\n    <IconButton\n      variant=\"ghost\"\n      tag={Link}\n      relative=\"path\"\n      to={toWithFallback}\n      onClick={handleClick}\n      label={formatMessage({\n        id: 'content-manager.preview.header.close',\n        defaultMessage: 'Close preview',\n      })}\n    >\n      <Cross />\n    </IconButton>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Status\n * -----------------------------------------------------------------------------------------------*/\n\nconst Status = () => {\n  // Get status\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const hasDraftAndPublished = schema?.options?.draftAndPublish ?? false;\n\n  if (!hasDraftAndPublished) {\n    return null;\n  }\n\n  const status = getDocumentStatus(document, meta);\n\n  return <DocumentStatus status={status} size=\"XS\" />;\n};\n\nconst PreviewTabs = () => {\n  const { formatMessage } = useIntl();\n\n  // URL query params\n  const [{ query }, setQuery] = useQueryParams<{ status: 'draft' | 'published' }>();\n\n  // Get status\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const hasDraftAndPublish = schema?.options?.draftAndPublish ?? false;\n  const documentStatus = getDocumentStatus(document, meta);\n\n  const handleTabChange = (status: string) => {\n    if (status === 'published' || status === 'draft') {\n      setQuery({ status }, 'push', true);\n    }\n  };\n\n  if (!hasDraftAndPublish) {\n    return null;\n  }\n\n  return (\n    <Tabs.Root variant=\"simple\" value={query.status || 'draft'} onValueChange={handleTabChange}>\n      <Tabs.List\n        aria-label={formatMessage({\n          id: 'preview.tabs.label',\n          defaultMessage: 'Document status',\n        })}\n      >\n        <StatusTab value=\"draft\">\n          {formatMessage({\n            id: 'content-manager.containers.List.draft',\n            defaultMessage: 'draft',\n          })}\n        </StatusTab>\n        <StatusTab value=\"published\" disabled={documentStatus === 'draft'}>\n          {formatMessage({\n            id: 'content-manager.containers.List.published',\n            defaultMessage: 'published',\n          })}\n        </StatusTab>\n      </Tabs.List>\n    </Tabs.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst PreviewHeader = () => {\n  const title = usePreviewContext('PreviewHeader', (state) => state.title);\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const plugins = useStrapiApp('PreviewHeader', (state) => state.plugins);\n  const onPreview = useDocumentContext('PreviewHeader', (state) => state.onPreview);\n\n  const [{ query }] = useQueryParams<{\n    status?: 'draft' | 'published';\n  }>();\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { copy } = useClipboard();\n\n  const handleCopyLink = () => {\n    copy(window.location.href);\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.preview.copy.success',\n        defaultMessage: 'Copied preview link',\n      }),\n      type: 'success',\n    });\n  };\n\n  const hasDraftAndPublish = schema.options?.draftAndPublish ?? false;\n  const documentActionProps = {\n    activeTab: query.status ?? null,\n    collectionType: schema.kind === 'collectionType' ? 'collection-types' : 'single-types',\n    model: schema.uid,\n    documentId: document.documentId,\n    document,\n    meta,\n    onPreview,\n    fromPreview: true,\n  } satisfies DocumentActionProps;\n\n  return (\n    <Flex height=\"48px\" gap={4} background=\"neutral0\" borderColor=\"neutral150\" tag=\"header\">\n      {/* Title and status */}\n      <TitleContainer height=\"100%\" paddingLeft={2} paddingRight={4}>\n        <ClosePreviewButton />\n        <PreviewTitle\n          tag=\"h1\"\n          title={title}\n          maxWidth=\"200px\"\n          fontSize={2}\n          paddingLeft={2}\n          paddingRight={3}\n          fontWeight={600}\n        >\n          {title}\n        </PreviewTitle>\n        <Status />\n      </TitleContainer>\n\n      {/* Tabs and actions */}\n      <Flex\n        flex={1}\n        paddingRight={2}\n        gap={2}\n        justifyContent={hasDraftAndPublish ? 'space-between' : 'flex-end'}\n      >\n        <Flex flex=\"1 1 70%\">\n          <PreviewTabs />\n        </Flex>\n        <Flex gap={2}>\n          <IconButton\n            type=\"button\"\n            label={formatMessage({\n              id: 'preview.copy.label',\n              defaultMessage: 'Copy preview link',\n            })}\n            onClick={handleCopyLink}\n          >\n            <LinkIcon />\n          </IconButton>\n          <InjectionZone area=\"preview.actions\" />\n          <DescriptionComponentRenderer\n            props={documentActionProps}\n            descriptions={(\n              plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n            ).getDocumentActions('preview')}\n          >\n            {(actions) => {\n              const filteredActions = actions.filter((action) =>\n                [action.position].flat().includes('preview')\n              );\n              const [primaryAction, secondaryAction] = filteredActions;\n\n              if (!primaryAction && !secondaryAction) return null;\n\n              // Both actions are available when draft and publish enabled\n              if (primaryAction && secondaryAction) {\n                return (\n                  <>\n                    {/* Save */}\n                    <DocumentActionButton\n                      {...secondaryAction}\n                      variant={secondaryAction.variant || 'secondary'}\n                    />\n                    {/* Publish */}\n                    <DocumentActionButton\n                      {...primaryAction}\n                      variant={primaryAction.variant || 'default'}\n                    />\n                  </>\n                );\n              }\n\n              // Otherwise we just have the save action\n              return (\n                <DocumentActionButton\n                  {...primaryAction}\n                  variant={primaryAction.variant || 'secondary'}\n                />\n              );\n            }}\n          </DescriptionComponentRenderer>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst PreviewTitle = styled(Typography)`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst StatusTab = styled(Tabs.Trigger)`\n  text-transform: uppercase;\n`;\n\nconst TitleContainer = styled(Flex)`\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nexport { PreviewHeader };\n", "import * as React from 'react';\n\nimport {\n  Page,\n  useQueryParams,\n  useRBAC,\n  createContext,\n  Form as FormContext,\n  Blocker,\n} from '@strapi/admin/strapi-admin';\nimport { Box, Flex, FocusTrap, IconButton, Portal } from '@strapi/design-system';\nimport { ArrowLineLeft } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { GetPreviewUrl } from '../../../../shared/contracts/preview';\nimport { COLLECTION_TYPES } from '../../constants/collections';\nimport { DocumentContextProvider } from '../../features/DocumentContext';\nimport { DocumentRBAC } from '../../features/DocumentRBAC';\nimport { type UseDocument, useDocument } from '../../hooks/useDocument';\nimport { type EditLayout, useDocumentLayout } from '../../hooks/useDocumentLayout';\nimport { FormLayout } from '../../pages/EditView/components/FormLayout';\nimport { buildValidParams } from '../../utils/api';\nimport { createYupSchema } from '../../utils/validation';\nimport { PreviewHeader } from '../components/PreviewHeader';\nimport { useGetPreviewUrlQuery } from '../services/preview';\n\nimport type { UID } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PreviewContextValue {\n  url: string;\n  title: string;\n  document: NonNullable<ReturnType<UseDocument>['document']>;\n  meta: NonNullable<ReturnType<UseDocument>['meta']>;\n  schema: NonNullable<ReturnType<UseDocument>['schema']>;\n  layout: EditLayout;\n}\n\nconst [PreviewProvider, usePreviewContext] = createContext<PreviewContextValue>('PreviewPage');\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst AnimatedArrow = styled(ArrowLineLeft)<{ isSideEditorOpen: boolean }>`\n  will-change: transform;\n  rotate: ${(props) => (props.isSideEditorOpen ? '0deg' : '180deg')};\n  transition: rotate 0.2s ease-in-out;\n`;\n\nconst PreviewPage = () => {\n  const location = useLocation();\n  const { formatMessage } = useIntl();\n\n  const iframeRef = React.useRef<HTMLIFrameElement>(null);\n  const [isSideEditorOpen, setIsSideEditorOpen] = React.useState(true);\n\n  // Read all the necessary data from the URL to find the right preview URL\n  const {\n    slug: model,\n    id: documentId,\n    collectionType,\n  } = useParams<{\n    slug: UID.ContentType;\n    id: string;\n    collectionType: string;\n  }>();\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n    status?: string;\n  }>();\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  if (!collectionType) {\n    throw new Error('Could not find collectionType in url params');\n  }\n\n  if (!model) {\n    throw new Error('Could not find model in url params');\n  }\n\n  // Only collection types must have a documentId\n  if (collectionType === COLLECTION_TYPES && !documentId) {\n    throw new Error('Could not find documentId in url params');\n  }\n\n  const previewUrlResponse = useGetPreviewUrlQuery({\n    params: {\n      contentType: model,\n    },\n    query: {\n      documentId,\n      locale: params.locale,\n      status: params.status as GetPreviewUrl.Request['query']['status'],\n    },\n  });\n  const documentResponse = useDocument({\n    model,\n    collectionType,\n    documentId,\n    params,\n  });\n  const documentLayoutResponse = useDocumentLayout(model);\n\n  const isLoading =\n    previewUrlResponse.isLoading || documentLayoutResponse.isLoading || documentResponse.isLoading;\n  if (isLoading && !documentResponse.document?.documentId) {\n    return <Page.Loading />;\n  }\n\n  const initialValues = documentResponse.getInitialFormValues();\n\n  if (\n    previewUrlResponse.error ||\n    documentLayoutResponse.error ||\n    !documentResponse.document ||\n    !documentResponse.meta ||\n    !documentResponse.schema ||\n    !initialValues\n  ) {\n    return <Page.Error />;\n  }\n\n  if (!previewUrlResponse.data?.data?.url) {\n    return <Page.NoData />;\n  }\n\n  const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);\n\n  const validateSync = (values: Record<string, unknown>, options: Record<string, string>) => {\n    const yupSchema = createYupSchema(\n      documentResponse.schema?.attributes,\n      documentResponse.components,\n      {\n        status: documentResponse.document?.status,\n        ...options,\n      }\n    );\n\n    return yupSchema.validateSync(values, { abortEarly: false });\n  };\n\n  const previewUrl = previewUrlResponse.data.data.url;\n\n  const onPreview = () => {\n    iframeRef?.current?.contentWindow?.postMessage(\n      { type: 'strapiUpdate' },\n      // The iframe origin is safe to use since it must be provided through the allowedOrigins config\n      new URL(iframeRef.current.src).origin\n    );\n  };\n\n  const hasAdvancedPreview = window.strapi.features.isEnabled('cms-advanced-preview');\n\n  return (\n    <>\n      <Page.Title>\n        {formatMessage(\n          {\n            id: 'content-manager.preview.page-title',\n            defaultMessage: '{contentType} preview',\n          },\n          {\n            contentType: documentTitle,\n          }\n        )}\n      </Page.Title>\n      <DocumentContextProvider\n        initialDocument={{\n          documentId: documentId || '',\n          model,\n          collectionType,\n        }}\n        onPreview={onPreview}\n      >\n        <PreviewProvider\n          url={previewUrl}\n          document={documentResponse.document}\n          title={documentTitle}\n          meta={documentResponse.meta}\n          schema={documentResponse.schema}\n          layout={documentLayoutResponse.edit}\n        >\n          <FormContext\n            method=\"PUT\"\n            disabled={\n              query.status === 'published' &&\n              documentResponse &&\n              documentResponse.document.status === 'published'\n            }\n            initialValues={documentResponse.getInitialFormValues()}\n            initialErrors={location?.state?.forceValidation ? validateSync(initialValues, {}) : {}}\n            height=\"100%\"\n            validate={(values: Record<string, unknown>, options: Record<string, string>) => {\n              const yupSchema = createYupSchema(\n                documentResponse.schema?.attributes,\n                documentResponse.components,\n                {\n                  status: documentResponse.document?.status,\n                  ...options,\n                }\n              );\n\n              return yupSchema.validate(values, { abortEarly: false });\n            }}\n          >\n            {({ resetForm }) => (\n              <Flex direction=\"column\" height=\"100%\" alignItems=\"stretch\">\n                <Blocker onProceed={resetForm} />\n                <PreviewHeader />\n                <Flex flex={1} overflow=\"auto\" alignItems=\"stretch\">\n                  {hasAdvancedPreview && (\n                    <Box\n                      overflow=\"auto\"\n                      width={isSideEditorOpen ? '50%' : 0}\n                      borderWidth=\"0 1px 0 0\"\n                      borderColor=\"neutral150\"\n                      paddingTop={6}\n                      paddingBottom={6}\n                      // Remove horizontal padding when the editor is closed or it won't fully disappear\n                      paddingLeft={isSideEditorOpen ? 6 : 0}\n                      paddingRight={isSideEditorOpen ? 6 : 0}\n                      transition=\"all 0.2s ease-in-out\"\n                    >\n                      <FormLayout\n                        layout={documentLayoutResponse.edit.layout}\n                        document={documentResponse}\n                        hasBackground={false}\n                      />\n                    </Box>\n                  )}\n\n                  <Box position=\"relative\" flex={1} height=\"100%\" overflow=\"hidden\">\n                    <Box\n                      data-testid=\"preview-iframe\"\n                      ref={iframeRef}\n                      src={previewUrl}\n                      /**\n                       * For some reason, changing an iframe's src tag causes the browser to add a new item in the\n                       * history stack. This is an issue for us as it means clicking the back button will not let us\n                       * go back to the edit view. To fix it, we need to trick the browser into thinking this is a\n                       * different iframe when the preview URL changes. So we set a key prop to force React\n                       * to mount a different node when the src changes.\n                       */\n                      key={previewUrl}\n                      title={formatMessage({\n                        id: 'content-manager.preview.panel.title',\n                        defaultMessage: 'Preview',\n                      })}\n                      width=\"100%\"\n                      height=\"100%\"\n                      borderWidth={0}\n                      tag=\"iframe\"\n                    />\n                    {hasAdvancedPreview && (\n                      <IconButton\n                        variant=\"tertiary\"\n                        label={formatMessage(\n                          isSideEditorOpen\n                            ? {\n                                id: 'content-manager.preview.content.close-editor',\n                                defaultMessage: 'Close editor',\n                              }\n                            : {\n                                id: 'content-manager.preview.content.open-editor',\n                                defaultMessage: 'Open editor',\n                              }\n                        )}\n                        onClick={() => setIsSideEditorOpen((prev) => !prev)}\n                        position=\"absolute\"\n                        top={2}\n                        left={2}\n                      >\n                        <AnimatedArrow isSideEditorOpen={isSideEditorOpen} />\n                      </IconButton>\n                    )}\n                  </Box>\n                </Flex>\n              </Flex>\n            )}\n          </FormContext>\n        </PreviewProvider>\n      </DocumentContextProvider>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedPreviewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedPreviewPageImpl = () => {\n  const { slug: model } = useParams<{\n    slug: string;\n  }>();\n  const {\n    permissions = [],\n    isLoading,\n    error,\n  } = useRBAC([\n    { action: 'plugin::content-manager.explorer.read', subject: model },\n    { action: 'plugin::content-manager.explorer.update', subject: model },\n    { action: 'plugin::content-manager.explorer.publish', subject: model },\n  ]);\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (error || !model) {\n    return (\n      <Box\n        height=\"100vh\"\n        width=\"100vw\"\n        position=\"fixed\"\n        top={0}\n        left={0}\n        zIndex={2}\n        background=\"neutral0\"\n      >\n        <Page.Error />\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      height=\"100vh\"\n      width=\"100vw\"\n      position=\"fixed\"\n      top={0}\n      left={0}\n      zIndex={2}\n      background=\"neutral0\"\n    >\n      <Page.Protect\n        permissions={permissions.filter((permission) =>\n          permission.action.includes('explorer.read')\n        )}\n      >\n        <DocumentRBAC permissions={permissions}>\n          <PreviewPage />\n        </DocumentRBAC>\n      </Page.Protect>\n    </Box>\n  );\n};\n\nconst ProtectedPreviewPage = () => {\n  return (\n    <Portal>\n      <FocusTrap>\n        <ProtectedPreviewPageImpl />\n      </FocusTrap>\n    </Portal>\n  );\n};\n\nexport { ProtectedPreviewPage, usePreviewContext };\n"],
  "mappings": "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",
  "names": ["ClosePreviewButton", "query", "useQueryParams", "formatMessage", "useIntl", "canGoBack", "useHistory", "state", "goBack", "history", "locationIndex", "currentLocationIndex", "historyTo", "at", "undefined", "fallback", "pathname", "search", "stringify", "encode", "toWithFallback", "handleClick", "e", "preventDefault", "_jsx", "IconButton", "variant", "tag", "Link", "relative", "to", "onClick", "label", "id", "defaultMessage", "Cross", "Status", "document", "usePreviewContext", "schema", "meta", "hasDraftAndPublished", "options", "draftAndPublish", "status", "getDocumentStatus", "DocumentStatus", "size", "PreviewTabs", "setQuery", "hasDraftAndPublish", "documentStatus", "handleTabChange", "Tabs", "Root", "value", "onValueChange", "_jsxs", "List", "aria-label", "StatusTab", "disabled", "PreviewHeader", "title", "plugins", "useStrapiApp", "onPreview", "useDocumentContext", "toggleNotification", "useNotification", "copy", "useClipboard", "handleCopyLink", "window", "location", "href", "message", "type", "documentActionProps", "activeTab", "collectionType", "kind", "model", "uid", "documentId", "fromPreview", "Flex", "height", "gap", "background", "borderColor", "TitleContainer", "paddingLeft", "paddingRight", "PreviewTitle", "maxWidth", "fontSize", "fontWeight", "flex", "justifyContent", "LinkIcon", "InjectionZone", "area", "DescriptionComponentRenderer", "props", "descriptions", "apis", "getDocumentActions", "actions", "filteredActions", "filter", "action", "position", "flat", "includes", "primaryAction", "secondaryAction", "_Fragment", "DocumentActionButton", "styled", "Typography", "Trigger", "theme", "colors", "neutral150", "PreviewProvider", "usePreviewContext", "createContext", "AnimatedArrow", "styled", "ArrowLineLeft", "props", "isSideEditorOpen", "PreviewPage", "location", "useLocation", "formatMessage", "useIntl", "iframeRef", "useRef", "setIsSideEditorOpen", "useState", "slug", "model", "id", "documentId", "collectionType", "useParams", "query", "useQueryParams", "params", "useMemo", "buildValidParams", "Error", "COLLECTION_TYPES", "previewUrlResponse", "useGetPreviewUrlQuery", "contentType", "locale", "status", "documentResponse", "useDocument", "documentLayoutResponse", "useDocumentLayout", "isLoading", "document", "_jsx", "Page", "Loading", "initialValues", "getInitialFormValues", "error", "meta", "schema", "data", "url", "NoData", "documentTitle", "getTitle", "edit", "settings", "mainField", "validateSync", "values", "options", "yupSchema", "createYupSchema", "attributes", "components", "abortEarly", "previewUrl", "onPreview", "current", "contentWindow", "postMessage", "type", "URL", "src", "origin", "hasAdvancedPreview", "window", "strapi", "features", "isEnabled", "_jsxs", "_Fragment", "Title", "defaultMessage", "DocumentContextProvider", "initialDocument", "title", "layout", "FormContext", "method", "disabled", "initialErrors", "state", "forceValidation", "height", "validate", "resetForm", "Flex", "direction", "alignItems", "Blocker", "onProceed", "PreviewHeader", "flex", "overflow", "Box", "width", "borderWidth", "borderColor", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "transition", "FormLayout", "hasBackground", "position", "data-testid", "ref", "tag", "IconButton", "variant", "label", "onClick", "prev", "top", "left", "ProtectedPreviewPageImpl", "permissions", "useRBAC", "action", "subject", "zIndex", "background", "Protect", "filter", "permission", "includes", "DocumentRBAC", "ProtectedPreviewPage", "Portal", "FocusTrap"]
}
