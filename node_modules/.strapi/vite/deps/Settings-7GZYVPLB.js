import {
  PERMISSIONS
} from "./chunk-PDGPTUUZ.js";
import "./chunk-SRRQNXXB.js";
import "./chunk-PC5KKJEK.js";
import {
  useMutation,
  useQuery
} from "./chunk-3HTKFRD7.js";
import "./chunk-4J3VOWQV.js";
import "./chunk-XHMF7CWR.js";
import "./chunk-GPI2VHC2.js";
import "./chunk-IJBKCR3K.js";
import "./chunk-62O4LC6R.js";
import "./chunk-J7F5HCRS.js";
import "./chunk-3DIXLFXX.js";
import {
  useFetchClient
} from "./chunk-5UIJKBWB.js";
import "./chunk-IIRI6BQS.js";
import "./chunk-35KGNMCE.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-3FDN6LLF.js";
import "./chunk-K65KIEAL.js";
import "./chunk-N6L25CPB.js";
import "./chunk-6VZBWNIX.js";
import "./chunk-Q65EZ4WN.js";
import "./chunk-E6CXZI45.js";
import "./chunk-43MLUMYN.js";
import "./chunk-AWEPTK4E.js";
import "./chunk-QIJGNK42.js";
import "./chunk-HUXU7IBC.js";
import "./chunk-ABXPREUU.js";
import "./chunk-234RJMMH.js";
import "./chunk-NKLJM66F.js";
import "./chunk-7DAG4T7B.js";
import "./chunk-JM6GQQDV.js";
import {
  errorsTrads
} from "./chunk-IFOFBKTA.js";
import {
  ValidationError,
  create4 as create,
  create6 as create2
} from "./chunk-L7CKIK7M.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-OM3P6XJP.js";
import "./chunk-W2EBIS6P.js";
import "./chunk-2YJPP6F5.js";
import "./chunk-GVM5AFPO.js";
import {
  Layouts
} from "./chunk-LGTUBU5N.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import {
  Page
} from "./chunk-LQ66U5BX.js";
import "./chunk-7IDP7SCX.js";
import "./chunk-RQ66TRCK.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-2W3NWVKQ.js";
import {
  useNotification
} from "./chunk-GSOKMUI2.js";
import "./chunk-MV7EAZLN.js";
import "./chunk-H5GOECOZ.js";
import "./chunk-CE4VABH2.js";
import "./chunk-5VODLFKF.js";
import {
  Box,
  Button,
  Field,
  Flex,
  Grid,
  SingleSelect,
  SingleSelectOption,
  TextInput,
  Typography,
  useIntl
} from "./chunk-GEQAKZDT.js";
import "./chunk-5ZC4PE57.js";
import "./chunk-TUXTO2Z5.js";
import "./chunk-FOD4ENRR.js";
import {
  ForwardRef$2d
} from "./chunk-QXF2FKMZ.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-6EUTJK7T.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/email/dist/admin/pages/Settings.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);

// node_modules/@strapi/email/dist/admin/utils/getYupInnerErrors.mjs
var extractValuesFromYupError = (errorType, errorParams) => {
  if (!errorType || !errorParams) {
    return {};
  }
  return {
    [errorType]: errorParams[errorType]
  };
};
var getYupInnerErrors = (error) => ((error == null ? void 0 : error.inner) || []).reduce((acc, currentError) => {
  if (currentError.path) {
    acc[currentError.path.split("[").join(".").split("]").join("")] = {
      id: currentError.message,
      defaultMessage: currentError.message,
      values: extractValuesFromYupError(currentError == null ? void 0 : currentError.type, currentError == null ? void 0 : currentError.params)
    };
  }
  return acc;
}, {});

// node_modules/@strapi/email/dist/admin/utils/schema.mjs
var schema = create2().shape({
  email: create().email(errorsTrads.email.id).required(errorsTrads.required.id)
});

// node_modules/@strapi/email/dist/admin/pages/Settings.mjs
var DocumentationLink = dt.a`
  color: ${({ theme }) => theme.colors.primary600};
`;
var ProtectedSettingsPage = () => (0, import_jsx_runtime.jsx)(Page.Protect, {
  permissions: PERMISSIONS.settings,
  children: (0, import_jsx_runtime.jsx)(SettingsPage, {})
});
var SettingsPage = () => {
  var _a, _b;
  const { toggleNotification } = useNotification();
  const { formatMessage } = useIntl();
  const { get, post } = useFetchClient();
  const [testAddress, setTestAddress] = React.useState("");
  const [isTestAddressValid, setIsTestAddressValid] = React.useState(false);
  const [formErrors, setFormErrors] = React.useState({});
  const { data, isLoading } = useQuery([
    "email",
    "settings"
  ], async () => {
    const res = await get("/email/settings");
    const { data: { config } } = res;
    return config;
  });
  const mutation = useMutation(async (body) => {
    await post("/email/test", body);
  }, {
    onError() {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "email.Settings.email.plugin.notification.test.error",
          defaultMessage: "Failed to send a test mail to {to}"
        }, {
          to: testAddress
        })
      });
    },
    onSuccess() {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: "email.Settings.email.plugin.notification.test.success",
          defaultMessage: "Email test succeeded, check the {to} mailbox"
        }, {
          to: testAddress
        })
      });
    },
    retry: false
  });
  React.useEffect(() => {
    schema.validate({
      email: testAddress
    }, {
      abortEarly: false
    }).then(() => setIsTestAddressValid(true)).catch(() => setIsTestAddressValid(false));
  }, [
    testAddress
  ]);
  const handleChange = (event) => {
    setTestAddress(() => event.target.value);
  };
  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      await schema.validate({
        email: testAddress
      }, {
        abortEarly: false
      });
    } catch (error) {
      if (error instanceof ValidationError) {
        setFormErrors(getYupInnerErrors(error));
      }
    }
    mutation.mutate({
      to: testAddress
    });
  };
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime.jsxs)(Page.Main, {
    labelledBy: "title",
    "aria-busy": isLoading || mutation.isLoading,
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: formatMessage({
          id: "Settings.PageTitle",
          defaultMessage: "Settings - {name}"
        }, {
          name: formatMessage({
            id: "email.Settings.email.plugin.title",
            defaultMessage: "Configuration"
          })
        })
      }),
      (0, import_jsx_runtime.jsx)(Layouts.Header, {
        id: "title",
        title: formatMessage({
          id: "email.Settings.email.plugin.title",
          defaultMessage: "Configuration"
        }),
        subtitle: formatMessage({
          id: "email.Settings.email.plugin.subTitle",
          defaultMessage: "Test the settings for the Email plugin"
        })
      }),
      (0, import_jsx_runtime.jsx)(Layouts.Content, {
        children: data && (0, import_jsx_runtime.jsx)("form", {
          onSubmit: handleSubmit,
          children: (0, import_jsx_runtime.jsxs)(Flex, {
            direction: "column",
            alignItems: "stretch",
            gap: 7,
            children: [
              (0, import_jsx_runtime.jsx)(Box, {
                background: "neutral0",
                hasRadius: true,
                shadow: "filterShadow",
                paddingTop: 6,
                paddingBottom: 6,
                paddingLeft: 7,
                paddingRight: 7,
                children: (0, import_jsx_runtime.jsxs)(Flex, {
                  direction: "column",
                  alignItems: "stretch",
                  gap: 4,
                  children: [
                    (0, import_jsx_runtime.jsxs)(Flex, {
                      direction: "column",
                      alignItems: "stretch",
                      gap: 1,
                      children: [
                        (0, import_jsx_runtime.jsx)(Typography, {
                          variant: "delta",
                          tag: "h2",
                          children: formatMessage({
                            id: "email.Settings.email.plugin.title.config",
                            defaultMessage: "Configuration"
                          })
                        }),
                        (0, import_jsx_runtime.jsx)(Typography, {
                          children: formatMessage({
                            id: "email.Settings.email.plugin.text.configuration",
                            defaultMessage: "The plugin is configured through the {file} file, checkout this {link} for the documentation."
                          }, {
                            file: "./config/plugins.js",
                            link: (0, import_jsx_runtime.jsx)(DocumentationLink, {
                              href: "https://docs.strapi.io/developer-docs/latest/plugins/email.html",
                              target: "_blank",
                              rel: "noopener noreferrer",
                              children: formatMessage({
                                id: "email.link",
                                defaultMessage: "Link"
                              })
                            })
                          })
                        })
                      ]
                    }),
                    (0, import_jsx_runtime.jsxs)(Grid.Root, {
                      gap: 5,
                      children: [
                        (0, import_jsx_runtime.jsx)(Grid.Item, {
                          col: 6,
                          s: 12,
                          direction: "column",
                          alignItems: "stretch",
                          children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                            name: "shipper-email",
                            children: [
                              (0, import_jsx_runtime.jsx)(Field.Label, {
                                children: formatMessage({
                                  id: "email.Settings.email.plugin.label.defaultFrom",
                                  defaultMessage: "Default sender email"
                                })
                              }),
                              (0, import_jsx_runtime.jsx)(TextInput, {
                                placeholder: formatMessage({
                                  id: "email.Settings.email.plugin.placeholder.defaultFrom",
                                  defaultMessage: "ex: Strapi No-Reply '<'no-reply@strapi.io'>'"
                                }),
                                disabled: true,
                                value: data.settings.defaultFrom
                              })
                            ]
                          })
                        }),
                        (0, import_jsx_runtime.jsx)(Grid.Item, {
                          col: 6,
                          s: 12,
                          direction: "column",
                          alignItems: "stretch",
                          children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                            name: "response-email",
                            children: [
                              (0, import_jsx_runtime.jsx)(Field.Label, {
                                children: formatMessage({
                                  id: "email.Settings.email.plugin.label.defaultReplyTo",
                                  defaultMessage: "Default response email"
                                })
                              }),
                              (0, import_jsx_runtime.jsx)(TextInput, {
                                placeholder: formatMessage({
                                  id: "email.Settings.email.plugin.placeholder.defaultReplyTo",
                                  defaultMessage: `ex: Strapi '<'example@strapi.io'>'`
                                }),
                                disabled: true,
                                value: data.settings.defaultReplyTo
                              })
                            ]
                          })
                        }),
                        (0, import_jsx_runtime.jsx)(Grid.Item, {
                          col: 6,
                          s: 12,
                          direction: "column",
                          alignItems: "stretch",
                          children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                            name: "email-provider",
                            children: [
                              (0, import_jsx_runtime.jsx)(Field.Label, {
                                children: formatMessage({
                                  id: "email.Settings.email.plugin.label.provider",
                                  defaultMessage: "Email provider"
                                })
                              }),
                              (0, import_jsx_runtime.jsx)(SingleSelect, {
                                disabled: true,
                                value: data.provider,
                                children: (0, import_jsx_runtime.jsx)(SingleSelectOption, {
                                  value: data.provider,
                                  children: data.provider
                                })
                              })
                            ]
                          })
                        })
                      ]
                    })
                  ]
                })
              }),
              (0, import_jsx_runtime.jsxs)(Flex, {
                alignItems: "stretch",
                background: "neutral0",
                direction: "column",
                gap: 4,
                hasRadius: true,
                shadow: "filterShadow",
                paddingTop: 6,
                paddingBottom: 6,
                paddingLeft: 7,
                paddingRight: 7,
                children: [
                  (0, import_jsx_runtime.jsx)(Typography, {
                    variant: "delta",
                    tag: "h2",
                    children: formatMessage({
                      id: "email.Settings.email.plugin.title.test",
                      defaultMessage: "Test email delivery"
                    })
                  }),
                  (0, import_jsx_runtime.jsxs)(Grid.Root, {
                    gap: 5,
                    children: [
                      (0, import_jsx_runtime.jsx)(Grid.Item, {
                        col: 6,
                        s: 12,
                        direction: "column",
                        alignItems: "stretch",
                        children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                          name: "test-address",
                          error: ((_a = formErrors.email) == null ? void 0 : _a.id) && formatMessage({
                            id: `email.${(_b = formErrors.email) == null ? void 0 : _b.id}`,
                            defaultMessage: "This is not a valid email"
                          }),
                          children: [
                            (0, import_jsx_runtime.jsx)(Field.Label, {
                              children: formatMessage({
                                id: "email.Settings.email.plugin.label.testAddress",
                                defaultMessage: "Recipient email"
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(TextInput, {
                              onChange: handleChange,
                              value: testAddress,
                              placeholder: formatMessage({
                                id: "email.Settings.email.plugin.placeholder.testAddress",
                                defaultMessage: "ex: developer@example.com"
                              })
                            })
                          ]
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Grid.Item, {
                        col: 7,
                        s: 12,
                        direction: "column",
                        alignItems: "start",
                        children: (0, import_jsx_runtime.jsx)(Button, {
                          loading: mutation.isLoading,
                          disabled: !isTestAddressValid,
                          type: "submit",
                          startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$2d, {}),
                          children: formatMessage({
                            id: "email.Settings.email.plugin.button.test-email",
                            defaultMessage: "Send test email"
                          })
                        })
                      })
                    ]
                  })
                ]
              })
            ]
          })
        })
      })
    ]
  });
};
export {
  ProtectedSettingsPage
};
//# sourceMappingURL=Settings-7GZYVPLB.js.map
