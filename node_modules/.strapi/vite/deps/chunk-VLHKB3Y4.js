import {
  InjectionZone
} from "./chunk-ACF43MI6.js";
import {
  RelativeTime
} from "./chunk-6KDH7GW3.js";
import {
  getDisplayName
} from "./chunk-RB2GXEEE.js";
import {
  CLONE_PATH,
  DocumentActions,
  DocumentActionsMenu,
  DocumentStatus,
  LIST_PATH,
  useDocumentActions,
  useDocumentRBAC
} from "./chunk-ER3PRL7C.js";
import {
  COLLECTION_TYPES,
  CREATED_AT_ATTRIBUTE_NAME,
  CREATED_BY_ATTRIBUTE_NAME,
  PUBLISHED_AT_ATTRIBUTE_NAME,
  PUBLISHED_BY_ATTRIBUTE_NAME,
  SINGLE_TYPES,
  UPDATED_AT_ATTRIBUTE_NAME,
  UPDATED_BY_ATTRIBUTE_NAME,
  useDoc
} from "./chunk-JIFANRG6.js";
import {
  DescriptionComponentRenderer
} from "./chunk-SRRQNXXB.js";
import {
  BackButton
} from "./chunk-Q65EZ4WN.js";
import {
  useForm
} from "./chunk-W2EBIS6P.js";
import {
  useQueryParams,
  useStrapiApp
} from "./chunk-7IDP7SCX.js";
import {
  useNotification
} from "./chunk-GSOKMUI2.js";
import {
  Box,
  Dialog,
  Flex,
  IconButton,
  SingleSelect,
  SingleSelectOption,
  Typography,
  useIntl
} from "./chunk-GEQAKZDT.js";
import {
  useMatch,
  useNavigate,
  useParams
} from "./chunk-TUXTO2Z5.js";
import {
  ForwardRef$1v,
  ForwardRef$2n,
  ForwardRef$3,
  ForwardRef$j
} from "./chunk-QXF2FKMZ.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-manager/dist/admin/pages/EditView/components/Header.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var Header = ({ isCreating, status, title: documentTitle = "Untitled" }) => {
  const { formatMessage } = useIntl();
  const isCloning = useMatch(CLONE_PATH) !== null;
  const params = useParams();
  const title = isCreating ? formatMessage({
    id: "content-manager.containers.edit.title.new",
    defaultMessage: "Create an entry"
  }) : documentTitle;
  return (0, import_jsx_runtime.jsxs)(Flex, {
    direction: "column",
    alignItems: "flex-start",
    paddingTop: 6,
    paddingBottom: 4,
    gap: 2,
    children: [
      (0, import_jsx_runtime.jsx)(BackButton, {
        fallback: params.collectionType === SINGLE_TYPES ? void 0 : `../${COLLECTION_TYPES}/${params.slug}`
      }),
      (0, import_jsx_runtime.jsxs)(Flex, {
        width: "100%",
        justifyContent: "space-between",
        gap: "80px",
        alignItems: "flex-start",
        children: [
          (0, import_jsx_runtime.jsx)(Typography, {
            variant: "alpha",
            tag: "h1",
            children: title
          }),
          (0, import_jsx_runtime.jsx)(HeaderToolbar, {})
        ]
      }),
      status ? (0, import_jsx_runtime.jsx)(Box, {
        marginTop: 1,
        children: (0, import_jsx_runtime.jsx)(DocumentStatus, {
          status: isCloning ? "draft" : status
        })
      }) : null
    ]
  });
};
var HeaderToolbar = () => {
  const { formatMessage } = useIntl();
  const isCloning = useMatch(CLONE_PATH) !== null;
  const [{ query: { status = "draft" } }] = useQueryParams();
  const { model, id, document, meta, collectionType } = useDoc();
  const plugins = useStrapiApp("HeaderToolbar", (state) => state.plugins);
  return (0, import_jsx_runtime.jsxs)(Flex, {
    gap: 2,
    children: [
      (0, import_jsx_runtime.jsx)(DescriptionComponentRenderer, {
        props: {
          activeTab: status,
          model,
          documentId: id,
          document: isCloning ? void 0 : document,
          meta: isCloning ? void 0 : meta,
          collectionType
        },
        descriptions: plugins["content-manager"].apis.getHeaderActions(),
        children: (actions) => {
          if (actions.length > 0) {
            return (0, import_jsx_runtime.jsx)(HeaderActions, {
              actions
            });
          } else {
            return null;
          }
        }
      }),
      (0, import_jsx_runtime.jsx)(DescriptionComponentRenderer, {
        props: {
          activeTab: status,
          model,
          documentId: id,
          document: isCloning ? void 0 : document,
          meta: isCloning ? void 0 : meta,
          collectionType
        },
        descriptions: plugins["content-manager"].apis.getDocumentActions("header"),
        children: (actions) => {
          const headerActions = actions.filter((action) => {
            const positions = Array.isArray(action.position) ? action.position : [
              action.position
            ];
            return positions.includes("header");
          });
          return (0, import_jsx_runtime.jsx)(DocumentActionsMenu, {
            actions: headerActions,
            label: formatMessage({
              id: "content-manager.containers.edit.header.more-actions",
              defaultMessage: "More actions"
            }),
            children: (0, import_jsx_runtime.jsx)(Information, {
              activeTab: status
            })
          });
        }
      })
    ]
  });
};
var Information = ({ activeTab }) => {
  const { formatMessage } = useIntl();
  const { document, meta } = useDoc();
  if (!document || !document.id) {
    return null;
  }
  const createAndUpdateDocument = activeTab === "draft" ? document : meta == null ? void 0 : meta.availableStatus.find((status) => status.publishedAt === null);
  const publishDocument = activeTab === "published" ? document : meta == null ? void 0 : meta.availableStatus.find((status) => status.publishedAt !== null);
  const creator = (createAndUpdateDocument == null ? void 0 : createAndUpdateDocument[CREATED_BY_ATTRIBUTE_NAME]) ? getDisplayName(createAndUpdateDocument[CREATED_BY_ATTRIBUTE_NAME]) : null;
  const updator = (createAndUpdateDocument == null ? void 0 : createAndUpdateDocument[UPDATED_BY_ATTRIBUTE_NAME]) ? getDisplayName(createAndUpdateDocument[UPDATED_BY_ATTRIBUTE_NAME]) : null;
  const information = [
    {
      isDisplayed: !!(publishDocument == null ? void 0 : publishDocument[PUBLISHED_AT_ATTRIBUTE_NAME]),
      label: formatMessage({
        id: "content-manager.containers.edit.information.last-published.label",
        defaultMessage: "Published"
      }),
      value: formatMessage({
        id: "content-manager.containers.edit.information.last-published.value",
        defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`
      }, {
        time: (0, import_jsx_runtime.jsx)(RelativeTime, {
          timestamp: new Date(publishDocument == null ? void 0 : publishDocument[PUBLISHED_AT_ATTRIBUTE_NAME])
        }),
        isAnonymous: !(publishDocument == null ? void 0 : publishDocument[PUBLISHED_BY_ATTRIBUTE_NAME]),
        author: (publishDocument == null ? void 0 : publishDocument[PUBLISHED_BY_ATTRIBUTE_NAME]) ? getDisplayName(publishDocument == null ? void 0 : publishDocument[PUBLISHED_BY_ATTRIBUTE_NAME]) : null
      })
    },
    {
      isDisplayed: !!(createAndUpdateDocument == null ? void 0 : createAndUpdateDocument[UPDATED_AT_ATTRIBUTE_NAME]),
      label: formatMessage({
        id: "content-manager.containers.edit.information.last-draft.label",
        defaultMessage: "Updated"
      }),
      value: formatMessage({
        id: "content-manager.containers.edit.information.last-draft.value",
        defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`
      }, {
        time: (0, import_jsx_runtime.jsx)(RelativeTime, {
          timestamp: new Date(createAndUpdateDocument == null ? void 0 : createAndUpdateDocument[UPDATED_AT_ATTRIBUTE_NAME])
        }),
        isAnonymous: !updator,
        author: updator
      })
    },
    {
      isDisplayed: !!(createAndUpdateDocument == null ? void 0 : createAndUpdateDocument[CREATED_AT_ATTRIBUTE_NAME]),
      label: formatMessage({
        id: "content-manager.containers.edit.information.document.label",
        defaultMessage: "Created"
      }),
      value: formatMessage({
        id: "content-manager.containers.edit.information.document.value",
        defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`
      }, {
        time: (0, import_jsx_runtime.jsx)(RelativeTime, {
          timestamp: new Date(createAndUpdateDocument == null ? void 0 : createAndUpdateDocument[CREATED_AT_ATTRIBUTE_NAME])
        }),
        isAnonymous: !creator,
        author: creator
      })
    }
  ].filter((info) => info.isDisplayed);
  return (0, import_jsx_runtime.jsx)(Flex, {
    borderWidth: "1px 0 0 0",
    borderStyle: "solid",
    borderColor: "neutral150",
    direction: "column",
    marginTop: 2,
    tag: "dl",
    padding: 5,
    gap: 3,
    alignItems: "flex-start",
    /**
    * The menu content has a padding of 4px, but we want our divider (the border top applied) to
    * be flush with the menu content. So we need to adjust the margin & width to account for the padding.
    */
    marginLeft: "-0.4rem",
    marginRight: "-0.4rem",
    width: "calc(100% + 8px)",
    children: information.map((info) => (0, import_jsx_runtime.jsxs)(Flex, {
      gap: 1,
      direction: "column",
      alignItems: "flex-start",
      children: [
        (0, import_jsx_runtime.jsx)(Typography, {
          tag: "dt",
          variant: "pi",
          fontWeight: "bold",
          children: info.label
        }),
        (0, import_jsx_runtime.jsx)(Typography, {
          tag: "dd",
          variant: "pi",
          textColor: "neutral600",
          children: info.value
        })
      ]
    }, info.label))
  });
};
var HeaderActions = ({ actions }) => {
  const [dialogId, setDialogId] = React.useState(null);
  const handleClick = (action) => async (e) => {
    if (!("options" in action)) {
      const { onClick = () => false, dialog, id } = action;
      const muteDialog = await onClick(e);
      if (dialog && !muteDialog) {
        e.preventDefault();
        setDialogId(id);
      }
    }
  };
  const handleClose = () => {
    setDialogId(null);
  };
  return (0, import_jsx_runtime.jsx)(Flex, {
    gap: 1,
    children: actions.map((action) => {
      if (action.options) {
        return (0, import_jsx_runtime.jsx)(SingleSelect, {
          size: "S",
          // @ts-expect-error – the DS will handle numbers, but we're not allowing the API.
          onChange: action.onSelect,
          "aria-label": action.label,
          ...action,
          children: action.options.map(({ label, ...option }) => (0, import_jsx_runtime.jsx)(SingleSelectOption, {
            ...option,
            children: label
          }, option.value))
        }, action.id);
      } else {
        if (action.type === "icon") {
          return (0, import_jsx_runtime.jsxs)(React.Fragment, {
            children: [
              (0, import_jsx_runtime.jsx)(IconButton, {
                disabled: action.disabled,
                label: action.label,
                size: "S",
                onClick: handleClick(action),
                children: action.icon
              }),
              action.dialog ? (0, import_jsx_runtime.jsx)(HeaderActionDialog, {
                ...action.dialog,
                isOpen: dialogId === action.id,
                onClose: handleClose
              }) : null
            ]
          }, action.id);
        }
      }
    })
  });
};
var HeaderActionDialog = ({ onClose, onCancel, title, content: Content, isOpen }) => {
  const handleClose = async () => {
    if (onCancel) {
      await onCancel();
    }
    onClose();
  };
  return (0, import_jsx_runtime.jsx)(Dialog.Root, {
    open: isOpen,
    onOpenChange: handleClose,
    children: (0, import_jsx_runtime.jsxs)(Dialog.Content, {
      children: [
        (0, import_jsx_runtime.jsx)(Dialog.Header, {
          children: title
        }),
        typeof Content === "function" ? (0, import_jsx_runtime.jsx)(Content, {
          onClose: handleClose
        }) : Content
      ]
    })
  });
};
var ConfigureTheViewAction = ({ collectionType, model }) => {
  const navigate = useNavigate();
  const { formatMessage } = useIntl();
  return {
    label: formatMessage({
      id: "app.links.configure-view",
      defaultMessage: "Configure the view"
    }),
    icon: (0, import_jsx_runtime.jsx)(ForwardRef$2n, {}),
    onClick: () => {
      navigate(`../${collectionType}/${model}/configurations/edit`);
    },
    position: "header"
  };
};
ConfigureTheViewAction.type = "configure-the-view";
ConfigureTheViewAction.position = "header";
var EditTheModelAction = ({ model }) => {
  const navigate = useNavigate();
  const { formatMessage } = useIntl();
  return {
    label: formatMessage({
      id: "content-manager.link-to-ctb",
      defaultMessage: "Edit the model"
    }),
    icon: (0, import_jsx_runtime.jsx)(ForwardRef$1v, {}),
    onClick: () => {
      navigate(`/plugins/content-type-builder/content-types/${model}`);
    },
    position: "header"
  };
};
EditTheModelAction.type = "edit-the-model";
EditTheModelAction.position = "header";
var DeleteAction = ({ documentId, model, collectionType, document }) => {
  const navigate = useNavigate();
  const { formatMessage } = useIntl();
  const listViewPathMatch = useMatch(LIST_PATH);
  const canDelete = useDocumentRBAC("DeleteAction", (state) => state.canDelete);
  const { delete: deleteAction, isLoading } = useDocumentActions();
  const { toggleNotification } = useNotification();
  const setSubmitting = useForm("DeleteAction", (state) => state.setSubmitting);
  const isLocalized = (document == null ? void 0 : document.locale) != null;
  return {
    disabled: !canDelete || !document,
    label: formatMessage({
      id: "content-manager.actions.delete.label",
      defaultMessage: "Delete entry{isLocalized, select, true { (all locales)} other {}}"
    }, {
      isLocalized
    }),
    icon: (0, import_jsx_runtime.jsx)(ForwardRef$j, {}),
    dialog: {
      type: "dialog",
      title: formatMessage({
        id: "app.components.ConfirmDialog.title",
        defaultMessage: "Confirmation"
      }),
      content: (0, import_jsx_runtime.jsxs)(Flex, {
        direction: "column",
        gap: 2,
        children: [
          (0, import_jsx_runtime.jsx)(ForwardRef$3, {
            width: "24px",
            height: "24px",
            fill: "danger600"
          }),
          (0, import_jsx_runtime.jsx)(Typography, {
            tag: "p",
            variant: "omega",
            textAlign: "center",
            children: formatMessage({
              id: "content-manager.actions.delete.dialog.body",
              defaultMessage: "Are you sure?"
            })
          })
        ]
      }),
      loading: isLoading,
      onConfirm: async () => {
        if (!listViewPathMatch) {
          setSubmitting(true);
        }
        try {
          if (!documentId && collectionType !== SINGLE_TYPES) {
            console.error("You're trying to delete a document without an id, this is likely a bug with Strapi. Please open an issue.");
            toggleNotification({
              message: formatMessage({
                id: "content-manager.actions.delete.error",
                defaultMessage: "An error occurred while trying to delete the document."
              }),
              type: "danger"
            });
            return;
          }
          const res = await deleteAction({
            documentId,
            model,
            collectionType,
            params: {
              locale: "*"
            }
          });
          if (!("error" in res)) {
            navigate({
              pathname: `../${collectionType}/${model}`
            }, {
              replace: true
            });
          }
        } finally {
          if (!listViewPathMatch) {
            setSubmitting(false);
          }
        }
      }
    },
    variant: "danger",
    position: [
      "header",
      "table-row"
    ]
  };
};
DeleteAction.type = "delete";
DeleteAction.position = [
  "header",
  "table-row"
];
var DEFAULT_HEADER_ACTIONS = [
  EditTheModelAction,
  ConfigureTheViewAction,
  DeleteAction
];

// node_modules/@strapi/content-manager/dist/admin/pages/EditView/components/Panels.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var React2 = __toESM(require_react(), 1);
var Panels = () => {
  const isCloning = useMatch(CLONE_PATH) !== null;
  const [{ query: { status } }] = useQueryParams({
    status: "draft"
  });
  const { model, id, document, meta, collectionType } = useDoc();
  const plugins = useStrapiApp("Panels", (state) => state.plugins);
  const props = {
    activeTab: status,
    model,
    documentId: id,
    document: isCloning ? void 0 : document,
    meta: isCloning ? void 0 : meta,
    collectionType
  };
  return (0, import_jsx_runtime2.jsx)(Flex, {
    direction: "column",
    alignItems: "stretch",
    gap: 2,
    children: (0, import_jsx_runtime2.jsx)(DescriptionComponentRenderer, {
      props,
      descriptions: plugins["content-manager"].apis.getEditViewSidePanels(),
      children: (panels) => panels.map(({ content, id: id2, ...description }) => (0, import_jsx_runtime2.jsx)(Panel, {
        ...description,
        children: content
      }, id2))
    })
  });
};
var ActionsPanel = () => {
  const { formatMessage } = useIntl();
  return {
    title: formatMessage({
      id: "content-manager.containers.edit.panels.default.title",
      defaultMessage: "Entry"
    }),
    content: (0, import_jsx_runtime2.jsx)(ActionsPanelContent, {})
  };
};
ActionsPanel.type = "actions";
var ActionsPanelContent = () => {
  const isCloning = useMatch(CLONE_PATH) !== null;
  const [{ query: { status = "draft" } }] = useQueryParams();
  const { model, id, document, meta, collectionType } = useDoc();
  const plugins = useStrapiApp("ActionsPanel", (state) => state.plugins);
  const props = {
    activeTab: status,
    model,
    documentId: id,
    document: isCloning ? void 0 : document,
    meta: isCloning ? void 0 : meta,
    collectionType
  };
  return (0, import_jsx_runtime2.jsxs)(Flex, {
    direction: "column",
    gap: 2,
    width: "100%",
    children: [
      (0, import_jsx_runtime2.jsx)(DescriptionComponentRenderer, {
        props,
        descriptions: plugins["content-manager"].apis.getDocumentActions("panel"),
        children: (actions) => (0, import_jsx_runtime2.jsx)(DocumentActions, {
          actions
        })
      }),
      (0, import_jsx_runtime2.jsx)(InjectionZone, {
        area: "editView.right-links",
        slug: model
      })
    ]
  });
};
var Panel = React2.forwardRef(({ children, title }, ref) => {
  return (0, import_jsx_runtime2.jsxs)(Flex, {
    ref,
    tag: "aside",
    "aria-labelledby": "additional-information",
    background: "neutral0",
    borderColor: "neutral150",
    hasRadius: true,
    paddingBottom: 4,
    paddingLeft: 4,
    paddingRight: 4,
    paddingTop: 4,
    shadow: "tableShadow",
    gap: 3,
    direction: "column",
    justifyContent: "stretch",
    alignItems: "flex-start",
    children: [
      (0, import_jsx_runtime2.jsx)(Typography, {
        tag: "h2",
        variant: "sigma",
        textTransform: "uppercase",
        textColor: "neutral600",
        children: title
      }),
      children
    ]
  });
});

export {
  Header,
  DEFAULT_HEADER_ACTIONS,
  Panels,
  ActionsPanel
};
//# sourceMappingURL=chunk-VLHKB3Y4.js.map
