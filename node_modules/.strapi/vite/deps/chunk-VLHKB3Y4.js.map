{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/pages/EditView/components/Header.tsx", "../../../@strapi/content-manager/admin/src/pages/EditView/components/Panels.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport {\n  DescriptionComponentRenderer,\n  useForm,\n  BackButton,\n  useNotification,\n  useStrapiApp,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Flex,\n  SingleSelect,\n  SingleSelectOption,\n  Typography,\n  IconButton,\n  Dialog,\n} from '@strapi/design-system';\nimport { ListPlus, Pencil, Trash, WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useMatch, useNavigate, useParams } from 'react-router-dom';\n\nimport { RelativeTime } from '../../../components/RelativeTime';\nimport {\n  CREATED_AT_ATTRIBUTE_NAME,\n  CREATED_BY_ATTRIBUTE_NAME,\n  PUBLISHED_AT_ATTRIBUTE_NAME,\n  PUBLISHED_BY_ATTRIBUTE_NAME,\n  UPDATED_AT_ATTRIBUTE_NAME,\n  UPDATED_BY_ATTRIBUTE_NAME,\n} from '../../../constants/attributes';\nimport { COLLECTION_TYPES, SINGLE_TYPES } from '../../../constants/collections';\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\nimport { CLONE_PATH, LIST_PATH } from '../../../router';\nimport { getDisplayName } from '../../../utils/users';\n\nimport { DocumentActionsMenu } from './DocumentActions';\nimport { DocumentStatus } from './DocumentStatus';\n\nimport type { ContentManagerPlugin, DocumentActionComponent } from '../../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * Header\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderProps {\n  isCreating?: boolean;\n  status?: 'draft' | 'published' | 'modified';\n  title?: string;\n}\n\nconst Header = ({ isCreating, status, title: documentTitle = 'Untitled' }: HeaderProps) => {\n  const { formatMessage } = useIntl();\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const params = useParams<{ collectionType: string; slug: string }>();\n\n  const title = isCreating\n    ? formatMessage({\n        id: 'content-manager.containers.edit.title.new',\n        defaultMessage: 'Create an entry',\n      })\n    : documentTitle;\n\n  return (\n    <Flex direction=\"column\" alignItems=\"flex-start\" paddingTop={6} paddingBottom={4} gap={2}>\n      <BackButton\n        fallback={\n          params.collectionType === SINGLE_TYPES\n            ? undefined\n            : `../${COLLECTION_TYPES}/${params.slug}`\n        }\n      />\n      <Flex width=\"100%\" justifyContent=\"space-between\" gap=\"80px\" alignItems=\"flex-start\">\n        <Typography variant=\"alpha\" tag=\"h1\">\n          {title}\n        </Typography>\n        <HeaderToolbar />\n      </Flex>\n      {status ? (\n        <Box marginTop={1}>\n          <DocumentStatus status={isCloning ? 'draft' : status} />\n        </Box>\n      ) : null}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderToolbar\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DialogOptions {\n  type: 'dialog';\n  title: string;\n  content?: React.ReactNode;\n  footer?: React.ReactNode;\n}\n\ninterface HeaderActionDescription {\n  disabled?: boolean;\n  label: string;\n  icon?: React.ReactNode;\n  type?: 'icon' | 'default';\n  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;\n  dialog?: DialogOptions;\n  options?: Array<{\n    disabled?: boolean;\n    label: string;\n    startIcon?: React.ReactNode;\n    textValue?: string;\n    value: string;\n  }>;\n  onSelect?: (value: string) => void;\n  value?: string;\n  customizeContent?: (value: string) => React.ReactNode;\n}\n\n/**\n * @description Contains the document actions that have `position: header`, if there are\n * none we still render the menu because we render the information about the document there.\n */\nconst HeaderToolbar = () => {\n  const { formatMessage } = useIntl();\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const [\n    {\n      query: { status = 'draft' },\n    },\n  ] = useQueryParams<{ status: 'draft' | 'published' }>();\n  const { model, id, document, meta, collectionType } = useDoc();\n  const plugins = useStrapiApp('HeaderToolbar', (state) => state.plugins);\n\n  return (\n    <Flex gap={2}>\n      <DescriptionComponentRenderer\n        props={{\n          activeTab: status,\n          model,\n          documentId: id,\n          document: isCloning ? undefined : document,\n          meta: isCloning ? undefined : meta,\n          collectionType,\n        }}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getHeaderActions()}\n      >\n        {(actions) => {\n          if (actions.length > 0) {\n            return <HeaderActions actions={actions} />;\n          } else {\n            return null;\n          }\n        }}\n      </DescriptionComponentRenderer>\n      <DescriptionComponentRenderer\n        props={{\n          activeTab: status,\n          model,\n          documentId: id,\n          document: isCloning ? undefined : document,\n          meta: isCloning ? undefined : meta,\n          collectionType,\n        }}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getDocumentActions('header')}\n      >\n        {(actions) => {\n          const headerActions = actions.filter((action) => {\n            const positions = Array.isArray(action.position) ? action.position : [action.position];\n            return positions.includes('header');\n          });\n\n          return (\n            <DocumentActionsMenu\n              actions={headerActions}\n              label={formatMessage({\n                id: 'content-manager.containers.edit.header.more-actions',\n                defaultMessage: 'More actions',\n              })}\n            >\n              <Information activeTab={status} />\n            </DocumentActionsMenu>\n          );\n        }}\n      </DescriptionComponentRenderer>\n    </Flex>\n  );\n};\n\ninterface InformationProps {\n  activeTab: 'draft' | 'published';\n}\n\nconst Information = ({ activeTab }: InformationProps) => {\n  const { formatMessage } = useIntl();\n  const { document, meta } = useDoc();\n\n  if (!document || !document.id) {\n    return null;\n  }\n\n  /**\n   * Because in the backend separate entries are made for draft and published\n   * documents, the creator fields are different for each of them. For example,\n   * you could make your draft in January and then publish it for the first time\n   * in Feb. This would make the createdAt value for the published entry in Feb\n   * but really we want to show the document as a whole. The draft entry will also\n   * never have the publishedAt values.\n   *\n   * So, we decipher which document to show the creator for based on the activeTab.\n   */\n\n  const createAndUpdateDocument =\n    activeTab === 'draft'\n      ? document\n      : meta?.availableStatus.find((status) => status.publishedAt === null);\n\n  const publishDocument =\n    activeTab === 'published'\n      ? document\n      : meta?.availableStatus.find((status) => status.publishedAt !== null);\n\n  const creator = createAndUpdateDocument?.[CREATED_BY_ATTRIBUTE_NAME]\n    ? getDisplayName(createAndUpdateDocument[CREATED_BY_ATTRIBUTE_NAME])\n    : null;\n\n  const updator = createAndUpdateDocument?.[UPDATED_BY_ATTRIBUTE_NAME]\n    ? getDisplayName(createAndUpdateDocument[UPDATED_BY_ATTRIBUTE_NAME])\n    : null;\n\n  const information: Array<{ isDisplayed?: boolean; label: string; value: React.ReactNode }> = [\n    {\n      isDisplayed: !!publishDocument?.[PUBLISHED_AT_ATTRIBUTE_NAME],\n      label: formatMessage({\n        id: 'content-manager.containers.edit.information.last-published.label',\n        defaultMessage: 'Published',\n      }),\n      value: formatMessage(\n        {\n          id: 'content-manager.containers.edit.information.last-published.value',\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\n        },\n        {\n          time: (\n            <RelativeTime timestamp={new Date(publishDocument?.[PUBLISHED_AT_ATTRIBUTE_NAME])} />\n          ),\n          isAnonymous: !publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME],\n          author: publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME]\n            ? getDisplayName(publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME])\n            : null,\n        }\n      ),\n    },\n    {\n      isDisplayed: !!createAndUpdateDocument?.[UPDATED_AT_ATTRIBUTE_NAME],\n      label: formatMessage({\n        id: 'content-manager.containers.edit.information.last-draft.label',\n        defaultMessage: 'Updated',\n      }),\n      value: formatMessage(\n        {\n          id: 'content-manager.containers.edit.information.last-draft.value',\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\n        },\n        {\n          time: (\n            <RelativeTime\n              timestamp={new Date(createAndUpdateDocument?.[UPDATED_AT_ATTRIBUTE_NAME])}\n            />\n          ),\n          isAnonymous: !updator,\n          author: updator,\n        }\n      ),\n    },\n    {\n      isDisplayed: !!createAndUpdateDocument?.[CREATED_AT_ATTRIBUTE_NAME],\n      label: formatMessage({\n        id: 'content-manager.containers.edit.information.document.label',\n        defaultMessage: 'Created',\n      }),\n      value: formatMessage(\n        {\n          id: 'content-manager.containers.edit.information.document.value',\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\n        },\n        {\n          time: (\n            <RelativeTime\n              timestamp={new Date(createAndUpdateDocument?.[CREATED_AT_ATTRIBUTE_NAME])}\n            />\n          ),\n          isAnonymous: !creator,\n          author: creator,\n        }\n      ),\n    },\n  ].filter((info) => info.isDisplayed);\n\n  return (\n    <Flex\n      borderWidth=\"1px 0 0 0\"\n      borderStyle=\"solid\"\n      borderColor=\"neutral150\"\n      direction=\"column\"\n      marginTop={2}\n      tag=\"dl\"\n      padding={5}\n      gap={3}\n      alignItems=\"flex-start\"\n      /**\n       * The menu content has a padding of 4px, but we want our divider (the border top applied) to\n       * be flush with the menu content. So we need to adjust the margin & width to account for the padding.\n       */\n      marginLeft=\"-0.4rem\"\n      marginRight=\"-0.4rem\"\n      width=\"calc(100% + 8px)\"\n    >\n      {information.map((info) => (\n        <Flex gap={1} direction=\"column\" alignItems=\"flex-start\" key={info.label}>\n          <Typography tag=\"dt\" variant=\"pi\" fontWeight=\"bold\">\n            {info.label}\n          </Typography>\n          <Typography tag=\"dd\" variant=\"pi\" textColor=\"neutral600\">\n            {info.value}\n          </Typography>\n        </Flex>\n      ))}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderActions\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderActionsProps {\n  actions: Array<HeaderActionDescription & { id: string }>;\n}\n\nconst HeaderActions = ({ actions }: HeaderActionsProps) => {\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\n\n  const handleClick =\n    (action: HeaderActionDescription & { id: string }) => async (e: React.MouseEvent) => {\n      if (!('options' in action)) {\n        const { onClick = () => false, dialog, id } = action;\n\n        const muteDialog = await onClick(e);\n\n        if (dialog && !muteDialog) {\n          e.preventDefault();\n          setDialogId(id);\n        }\n      }\n    };\n\n  const handleClose = () => {\n    setDialogId(null);\n  };\n\n  return (\n    <Flex gap={1}>\n      {actions.map((action) => {\n        if (action.options) {\n          return (\n            <SingleSelect\n              key={action.id}\n              size=\"S\"\n              // @ts-expect-error – the DS will handle numbers, but we're not allowing the API.\n              onChange={action.onSelect}\n              aria-label={action.label}\n              {...action}\n            >\n              {action.options.map(({ label, ...option }) => (\n                <SingleSelectOption key={option.value} {...option}>\n                  {label}\n                </SingleSelectOption>\n              ))}\n            </SingleSelect>\n          );\n        } else {\n          if (action.type === 'icon') {\n            return (\n              <React.Fragment key={action.id}>\n                <IconButton\n                  disabled={action.disabled}\n                  label={action.label}\n                  size=\"S\"\n                  onClick={handleClick(action)}\n                >\n                  {action.icon}\n                </IconButton>\n                {action.dialog ? (\n                  <HeaderActionDialog\n                    {...action.dialog}\n                    isOpen={dialogId === action.id}\n                    onClose={handleClose}\n                  />\n                ) : null}\n              </React.Fragment>\n            );\n          }\n        }\n      })}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderActionDialog\n * -----------------------------------------------------------------------------------------------*/\ninterface HeaderActionDialogProps {\n  onClose: () => void;\n  onCancel?: () => Promise<void>;\n  title: string;\n  content?: React.ReactNode | ((props: { onClose: () => void }) => React.ReactNode);\n  isOpen: boolean;\n}\n\nconst HeaderActionDialog = ({\n  onClose,\n  onCancel,\n  title,\n  content: Content,\n  isOpen,\n}: HeaderActionDialogProps) => {\n  const handleClose = async () => {\n    if (onCancel) {\n      await onCancel();\n    }\n\n    onClose();\n  };\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={handleClose}>\n      <Dialog.Content>\n        <Dialog.Header>{title}</Dialog.Header>\n        {typeof Content === 'function' ? <Content onClose={handleClose} /> : Content}\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionComponents\n * -----------------------------------------------------------------------------------------------*/\n\nconst ConfigureTheViewAction: DocumentActionComponent = ({ collectionType, model }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n\n  return {\n    label: formatMessage({\n      id: 'app.links.configure-view',\n      defaultMessage: 'Configure the view',\n    }),\n    icon: <ListPlus />,\n    onClick: () => {\n      navigate(`../${collectionType}/${model}/configurations/edit`);\n    },\n    position: 'header',\n  };\n};\n\nConfigureTheViewAction.type = 'configure-the-view';\nConfigureTheViewAction.position = 'header';\n\nconst EditTheModelAction: DocumentActionComponent = ({ model }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n\n  return {\n    label: formatMessage({\n      id: 'content-manager.link-to-ctb',\n      defaultMessage: 'Edit the model',\n    }),\n    icon: <Pencil />,\n    onClick: () => {\n      navigate(`/plugins/content-type-builder/content-types/${model}`);\n    },\n    position: 'header',\n  };\n};\n\nEditTheModelAction.type = 'edit-the-model';\nEditTheModelAction.position = 'header';\n\nconst DeleteAction: DocumentActionComponent = ({ documentId, model, collectionType, document }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const listViewPathMatch = useMatch(LIST_PATH);\n  const canDelete = useDocumentRBAC('DeleteAction', (state) => state.canDelete);\n  const { delete: deleteAction, isLoading } = useDocumentActions();\n  const { toggleNotification } = useNotification();\n  const setSubmitting = useForm('DeleteAction', (state) => state.setSubmitting);\n  const isLocalized = document?.locale != null;\n\n  return {\n    disabled: !canDelete || !document,\n    label: formatMessage(\n      {\n        id: 'content-manager.actions.delete.label',\n        defaultMessage: 'Delete entry{isLocalized, select, true { (all locales)} other {}}',\n      },\n      { isLocalized }\n    ),\n    icon: <Trash />,\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" gap={2}>\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n            {formatMessage({\n              id: 'content-manager.actions.delete.dialog.body',\n              defaultMessage: 'Are you sure?',\n            })}\n          </Typography>\n        </Flex>\n      ),\n      loading: isLoading,\n      onConfirm: async () => {\n        /**\n         * If we have a match, we're in the list view\n         * and therefore not in a form and shouldn't be\n         * trying to set the submitting value.\n         */\n        if (!listViewPathMatch) {\n          setSubmitting(true);\n        }\n        try {\n          if (!documentId && collectionType !== SINGLE_TYPES) {\n            console.error(\n              \"You're trying to delete a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n            );\n\n            toggleNotification({\n              message: formatMessage({\n                id: 'content-manager.actions.delete.error',\n                defaultMessage: 'An error occurred while trying to delete the document.',\n              }),\n              type: 'danger',\n            });\n\n            return;\n          }\n\n          const res = await deleteAction({\n            documentId,\n            model,\n            collectionType,\n            params: {\n              locale: '*',\n            },\n          });\n\n          if (!('error' in res)) {\n            navigate({ pathname: `../${collectionType}/${model}` }, { replace: true });\n          }\n        } finally {\n          if (!listViewPathMatch) {\n            setSubmitting(false);\n          }\n        }\n      },\n    },\n    variant: 'danger',\n    position: ['header', 'table-row'],\n  };\n};\n\nDeleteAction.type = 'delete';\nDeleteAction.position = ['header', 'table-row'];\n\nconst DEFAULT_HEADER_ACTIONS = [EditTheModelAction, ConfigureTheViewAction, DeleteAction];\n\nexport { Header, DEFAULT_HEADER_ACTIONS };\nexport type { HeaderProps, HeaderActionDescription };\n", "import * as React from 'react';\n\nimport {\n  useQueryParams,\n  useStrapiApp,\n  DescriptionComponentRenderer,\n} from '@strapi/admin/strapi-admin';\nimport { Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useMatch } from 'react-router-dom';\n\nimport { InjectionZone } from '../../../components/InjectionZone';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { CLONE_PATH } from '../../../router';\n\nimport { DocumentActions } from './DocumentActions';\n\nimport type {\n  ContentManagerPlugin,\n  DocumentActionProps,\n  PanelComponent,\n  PanelComponentProps,\n} from '../../../content-manager';\n\ninterface PanelDescription {\n  title: string;\n  content: React.ReactNode;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Panels\n * -----------------------------------------------------------------------------------------------*/\n\nconst Panels = () => {\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const [\n    {\n      query: { status },\n    },\n  ] = useQueryParams<{ status: 'draft' | 'published' }>({\n    status: 'draft',\n  });\n  const { model, id, document, meta, collectionType } = useDoc();\n  const plugins = useStrapiApp('Panels', (state) => state.plugins);\n\n  const props = {\n    activeTab: status,\n    model,\n    documentId: id,\n    document: isCloning ? undefined : document,\n    meta: isCloning ? undefined : meta,\n    collectionType,\n  } satisfies PanelComponentProps;\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n      <DescriptionComponentRenderer\n        props={props}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getEditViewSidePanels()}\n      >\n        {(panels) =>\n          panels.map(({ content, id, ...description }) => (\n            <Panel key={id} {...description}>\n              {content}\n            </Panel>\n          ))\n        }\n      </DescriptionComponentRenderer>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Default Action Panels (CE)\n * -----------------------------------------------------------------------------------------------*/\n\nconst ActionsPanel: PanelComponent = () => {\n  const { formatMessage } = useIntl();\n\n  return {\n    title: formatMessage({\n      id: 'content-manager.containers.edit.panels.default.title',\n      defaultMessage: 'Entry',\n    }),\n    content: <ActionsPanelContent />,\n  };\n};\n\nActionsPanel.type = 'actions';\n\nconst ActionsPanelContent = () => {\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const [\n    {\n      query: { status = 'draft' },\n    },\n  ] = useQueryParams<{ status: 'draft' | 'published' }>();\n  const { model, id, document, meta, collectionType } = useDoc();\n  const plugins = useStrapiApp('ActionsPanel', (state) => state.plugins);\n\n  const props = {\n    activeTab: status,\n    model,\n    documentId: id,\n    document: isCloning ? undefined : document,\n    meta: isCloning ? undefined : meta,\n    collectionType,\n  } satisfies DocumentActionProps;\n\n  return (\n    <Flex direction=\"column\" gap={2} width=\"100%\">\n      <DescriptionComponentRenderer\n        props={props}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getDocumentActions('panel')}\n      >\n        {(actions) => <DocumentActions actions={actions} />}\n      </DescriptionComponentRenderer>\n      <InjectionZone area=\"editView.right-links\" slug={model} />\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Panel\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PanelProps extends Pick<PanelDescription, 'title'> {\n  children: React.ReactNode;\n}\n\nconst Panel = React.forwardRef<any, PanelProps>(({ children, title }, ref) => {\n  return (\n    <Flex\n      ref={ref}\n      tag=\"aside\"\n      aria-labelledby=\"additional-information\"\n      background=\"neutral0\"\n      borderColor=\"neutral150\"\n      hasRadius\n      paddingBottom={4}\n      paddingLeft={4}\n      paddingRight={4}\n      paddingTop={4}\n      shadow=\"tableShadow\"\n      gap={3}\n      direction=\"column\"\n      justifyContent=\"stretch\"\n      alignItems=\"flex-start\"\n    >\n      <Typography tag=\"h2\" variant=\"sigma\" textTransform=\"uppercase\" textColor=\"neutral600\">\n        {title}\n      </Typography>\n      {children}\n    </Flex>\n  );\n});\n\nexport { Panels, ActionsPanel };\nexport type { PanelDescription };\n"],
  "mappings": "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",
  "names": ["Header", "isCreating", "status", "title", "documentTitle", "formatMessage", "useIntl", "isCloning", "useMatch", "CLONE_PATH", "params", "useParams", "id", "defaultMessage", "_jsxs", "Flex", "direction", "alignItems", "paddingTop", "paddingBottom", "gap", "_jsx", "BackButton", "fallback", "collectionType", "SINGLE_TYPES", "undefined", "COLLECTION_TYPES", "slug", "width", "justifyContent", "Typography", "variant", "tag", "HeaderToolbar", "Box", "marginTop", "DocumentStatus", "query", "useQueryParams", "model", "document", "meta", "useDoc", "plugins", "useStrapiApp", "state", "DescriptionComponentRenderer", "props", "activeTab", "documentId", "descriptions", "apis", "getHeaderActions", "actions", "length", "HeaderActions", "getDocumentActions", "headerActions", "filter", "action", "positions", "Array", "isArray", "position", "includes", "DocumentActionsMenu", "label", "Information", "createAndUpdateDocument", "availableStatus", "find", "publishedAt", "publishDocument", "creator", "CREATED_BY_ATTRIBUTE_NAME", "getDisplayName", "updator", "UPDATED_BY_ATTRIBUTE_NAME", "information", "isDisplayed", "PUBLISHED_AT_ATTRIBUTE_NAME", "value", "time", "RelativeTime", "timestamp", "Date", "isAnonymous", "PUBLISHED_BY_ATTRIBUTE_NAME", "author", "UPDATED_AT_ATTRIBUTE_NAME", "CREATED_AT_ATTRIBUTE_NAME", "info", "borderWidth", "borderStyle", "borderColor", "padding", "marginLeft", "marginRight", "map", "fontWeight", "textColor", "dialogId", "setDialogId", "useState", "handleClick", "e", "onClick", "dialog", "muteDialog", "preventDefault", "handleClose", "options", "SingleSelect", "size", "onChange", "onSelect", "aria-label", "option", "SingleSelectOption", "type", "Fragment", "IconButton", "disabled", "icon", "HeaderActionDialog", "isOpen", "onClose", "onCancel", "content", "Content", "Dialog", "Root", "open", "onOpenChange", "ConfigureTheViewAction", "navigate", "useNavigate", "ListPlus", "EditTheModelAction", "Pencil", "DeleteAction", "listViewPathMatch", "LIST_PATH", "canDelete", "useDocumentRBAC", "delete", "deleteAction", "isLoading", "useDocumentActions", "toggleNotification", "useNotification", "setSubmitting", "useForm", "isLocalized", "locale", "Trash", "WarningCircle", "height", "fill", "textAlign", "loading", "onConfirm", "console", "error", "message", "res", "pathname", "replace", "DEFAULT_HEADER_ACTIONS", "Panels", "isCloning", "useMatch", "CLONE_PATH", "query", "status", "useQueryParams", "model", "id", "document", "meta", "collectionType", "useDoc", "plugins", "useStrapiApp", "state", "props", "activeTab", "documentId", "undefined", "_jsx", "Flex", "direction", "alignItems", "gap", "DescriptionComponentRenderer", "descriptions", "apis", "getEditViewSidePanels", "panels", "map", "content", "description", "Panel", "ActionsPanel", "formatMessage", "useIntl", "title", "defaultMessage", "ActionsPanelContent", "type", "_jsxs", "width", "getDocumentActions", "actions", "DocumentActions", "InjectionZone", "area", "slug", "forwardRef", "children", "ref", "tag", "aria-labelledby", "background", "borderColor", "hasRadius", "paddingBottom", "paddingLeft", "paddingRight", "paddingTop", "shadow", "justifyContent", "Typography", "variant", "textTransform", "textColor"]
}
