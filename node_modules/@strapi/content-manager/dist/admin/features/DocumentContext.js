'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var strapiAdmin = require('@strapi/admin/strapi-admin');
var useDocument = require('../hooks/useDocument.js');
var api = require('../utils/api.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const [DocumentProvider, useDocumentContext] = strapiAdmin.createContext('DocumentContext');
/**
 * TODO: Document in contributor docs, Add unit test
 *
 * This context provider and its associated hook are used to access a document at its root level
 * and expose a function to change the current document being viewed to one of the root level docuemnt's relations.
 *
 * The useDocumentContext hook exposes:
 * - meta: information about the currentDocument,
 * - document: the actual document,
 * - changeDocument: a function to change the current document to one of its relations.
 * - rootDocumentMeta: information about the root level document (current page)
 */ const DocumentContextProvider = ({ children, initialDocument, onPreview })=>{
    /**
   * Initialize with the "root" document and expose a setter method to change to
   * one of the root level document's relations.
   */ const [currentDocumentMeta, changeDocument] = React__namespace.useState(initialDocument);
    const params = React__namespace.useMemo(()=>api.buildValidParams(currentDocumentMeta.params ?? {}), [
        currentDocumentMeta.params
    ]);
    const document = useDocument.useDocument({
        ...currentDocumentMeta,
        params
    });
    const [documentHistory, setDocumentHistory] = React__namespace.useState([]);
    return /*#__PURE__*/ jsxRuntime.jsx(DocumentProvider, {
        changeDocument: changeDocument,
        document: document,
        rootDocumentMeta: {
            documentId: initialDocument.documentId,
            model: initialDocument.model,
            collectionType: initialDocument.collectionType
        },
        meta: currentDocumentMeta,
        documentHistory: documentHistory,
        setDocumentHistory: setDocumentHistory,
        onPreview: onPreview,
        children: children
    });
};

exports.DocumentContextProvider = DocumentContextProvider;
exports.useDocumentContext = useDocumentContext;
//# sourceMappingURL=DocumentContext.js.map
