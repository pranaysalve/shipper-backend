import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import * as React from 'react';
import { createContext, Form, ConfirmDialog, useStrapiApp, useRBAC, DescriptionComponentRenderer } from '@strapi/admin/strapi-admin';
import { Modal, TextButton, Tooltip, Flex, IconButton, Typography, Button, Dialog, Loader, EmptyStateLayout, Box } from '@strapi/design-system';
import { ArrowLeft, ArrowsOut, WarningCircle } from '@strapi/icons';
import { useIntl } from 'react-intl';
import { useNavigate, useLocation } from 'react-router-dom';
import { styled } from 'styled-components';
import { COLLECTION_TYPES, SINGLE_TYPES } from '../../../../../constants/collections.mjs';
import { PERMISSIONS } from '../../../../../constants/plugin.mjs';
import { useDocumentContext } from '../../../../../features/DocumentContext.mjs';
import { DocumentRBAC } from '../../../../../features/DocumentRBAC.mjs';
import { useDocumentLayout } from '../../../../../hooks/useDocumentLayout.mjs';
import { useLazyGetDocumentQuery } from '../../../../../services/documents.mjs';
import { createYupSchema } from '../../../../../utils/validation.mjs';
import { DocumentActionButton } from '../../DocumentActions.mjs';
import { DocumentStatus } from '../../DocumentStatus.mjs';
import { FormLayout } from '../../FormLayout.mjs';

function getCollectionType(url) {
    const regex = new RegExp(`(${COLLECTION_TYPES}|${SINGLE_TYPES})`);
    const match = url.match(regex);
    return match ? match[1] : undefined;
}
const CustomModalContent = styled(Modal.Content)`
  width: 90%;
  max-width: 100%;
  height: 90%;
  max-height: 100%;
`;
const [RelationModalProvider, useRelationModal] = createContext('RelationModal', {
    parentModified: false,
    depth: 0
});
const RelationModalForm = ({ relation, triggerButtonLabel })=>{
    const navigate = useNavigate();
    const { pathname, search } = useLocation();
    const { formatMessage } = useIntl();
    const [triggerRefetchDocument] = useLazyGetDocumentQuery();
    const currentDocument = useDocumentContext('RelationModalForm', (state)=>state.document);
    const rootDocumentMeta = useDocumentContext('RelationModalForm', (state)=>state.rootDocumentMeta);
    const currentDocumentMeta = useDocumentContext('RelationModalForm', (state)=>state.meta);
    const changeDocument = useDocumentContext('RelationModalForm', (state)=>state.changeDocument);
    const documentHistory = useDocumentContext('RelationModalForm', (state)=>state.documentHistory);
    const setDocumentHistory = useDocumentContext('RelationModalForm', (state)=>state.setDocumentHistory);
    const [isConfirmationOpen, setIsConfirmationOpen] = React.useState(false);
    const [actionPosition, setActionPosition] = React.useState('cancel');
    const [isModalOpen, setIsModalOpen] = React.useState(false);
    // NOTE: Not sure about this relation modal context, maybe we should move this to DocumentContext?
    // Get parent modal context if it exists
    const parentContext = useRelationModal('RelationModalForm', (state)=>state);
    // Get depth of nested modals
    const depth = parentContext ? parentContext.depth + 1 : 0;
    // Check if this is a nested modal
    const isNested = depth > 0;
    const addDocumentToHistory = (document)=>setDocumentHistory((prev)=>[
                ...prev,
                document
            ]);
    const getPreviousDocument = ()=>{
        if (documentHistory.length === 0) return undefined;
        const lastDocument = documentHistory[documentHistory.length - 1];
        return lastDocument;
    };
    const removeLastDocumentFromHistory = ()=>{
        setDocumentHistory((prev)=>[
                ...prev
            ].slice(0, prev.length - 1));
    };
    const handleToggleModal = ()=>{
        if (isModalOpen) {
            setIsModalOpen(false);
            const document = {
                collectionType: rootDocumentMeta.collectionType,
                model: rootDocumentMeta.model,
                documentId: rootDocumentMeta.documentId
            };
            // Change back to the root document
            changeDocument(document);
            // Reset the document history
            setDocumentHistory([]);
            // Reset action position
            setActionPosition('cancel');
            // Read from cache or refetch root document
            triggerRefetchDocument(document, // Favor the cache
            true);
        } else {
            changeDocument(relation);
            setIsModalOpen(true);
        }
    };
    const getFullPageLink = ()=>{
        const isSingleType = currentDocumentMeta.collectionType === SINGLE_TYPES;
        const queryParams = currentDocumentMeta.params?.locale ? `?plugins[i18n][locale]=${currentDocumentMeta.params.locale}` : '';
        return `/content-manager/${currentDocumentMeta.collectionType}/${currentDocumentMeta.model}${isSingleType ? '' : '/' + currentDocumentMeta.documentId}${queryParams}`;
    };
    const handleRedirection = ()=>{
        const editViewUrl = `${pathname}${search}`;
        const isRootDocumentUrl = editViewUrl.includes(getFullPageLink());
        if (isRootDocumentUrl) {
            handleToggleModal();
        } else {
            navigate(getFullPageLink());
        }
    };
    const handleConfirm = ()=>{
        if (actionPosition === 'navigate') {
            handleRedirection();
        } else if (actionPosition === 'back') {
            const previousRelation = getPreviousDocument();
            if (previousRelation) {
                removeLastDocumentFromHistory();
                changeDocument(previousRelation);
            }
        } else {
            // Add current relation to history before opening a new one in case we are opening a new one
            if (currentDocumentMeta && Object.keys(currentDocumentMeta).length > 0) {
                addDocumentToHistory(currentDocumentMeta);
            }
            handleToggleModal();
        }
    };
    return /*#__PURE__*/ jsx(Form, {
        method: "PUT",
        initialValues: currentDocument.getInitialFormValues(),
        validate: (values, options)=>{
            const yupSchema = createYupSchema(currentDocument.schema?.attributes, currentDocument.components, {
                status: currentDocument.document?.status,
                ...options
            });
            return yupSchema.validate(values, {
                abortEarly: false
            });
        },
        children: ({ modified, isSubmitting, resetForm })=>{
            // We don't count the root document, so history starts after 1
            const hasHistory = documentHistory.length > 1;
            return /*#__PURE__*/ jsxs(RelationModalProvider, {
                parentModified: modified,
                depth: depth,
                children: [
                    /*#__PURE__*/ jsxs(Modal.Root, {
                        open: isModalOpen,
                        onOpenChange: ()=>{
                            if (isModalOpen) {
                                if (modified && !isSubmitting) {
                                    setIsConfirmationOpen(true);
                                } else {
                                    handleToggleModal();
                                }
                            }
                        },
                        children: [
                            /*#__PURE__*/ jsx(Modal.Trigger, {
                                children: /*#__PURE__*/ jsx(Tooltip, {
                                    description: triggerButtonLabel,
                                    children: /*#__PURE__*/ jsx(CustomTextButton, {
                                        onClick: ()=>{
                                            // Check if parent modal has unsaved changes
                                            if (isNested && parentContext.parentModified) {
                                                setIsConfirmationOpen(true);
                                                // Return early to avoid opening the modal
                                                return;
                                            } else {
                                                if (modified && !isSubmitting) {
                                                    setIsConfirmationOpen(true);
                                                } else {
                                                    // Add current relation to history before opening a new one
                                                    if (currentDocumentMeta && Object.keys(currentDocumentMeta).length > 0) {
                                                        addDocumentToHistory(currentDocumentMeta);
                                                    }
                                                    handleToggleModal();
                                                }
                                                if (!isModalOpen) {
                                                    setIsModalOpen(true);
                                                }
                                            }
                                        },
                                        width: "100%",
                                        children: triggerButtonLabel
                                    })
                                })
                            }),
                            /*#__PURE__*/ jsxs(CustomModalContent, {
                                children: [
                                    /*#__PURE__*/ jsx(Modal.Header, {
                                        gap: 2,
                                        children: /*#__PURE__*/ jsx(Flex, {
                                            justifyContent: "space-between",
                                            alignItems: "center",
                                            width: "100%",
                                            children: /*#__PURE__*/ jsxs(Flex, {
                                                gap: 2,
                                                children: [
                                                    /*#__PURE__*/ jsx(IconButton, {
                                                        withTooltip: false,
                                                        label: "Back",
                                                        variant: "ghost",
                                                        disabled: !hasHistory,
                                                        onClick: ()=>{
                                                            setActionPosition('back');
                                                            if (modified && !isSubmitting) {
                                                                setIsConfirmationOpen(true);
                                                            } else {
                                                                const previousRelation = getPreviousDocument();
                                                                if (previousRelation) {
                                                                    removeLastDocumentFromHistory();
                                                                    changeDocument(previousRelation);
                                                                }
                                                            }
                                                        },
                                                        marginRight: 1,
                                                        children: /*#__PURE__*/ jsx(ArrowLeft, {})
                                                    }),
                                                    /*#__PURE__*/ jsx(Typography, {
                                                        tag: "span",
                                                        fontWeight: 600,
                                                        children: formatMessage({
                                                            id: 'content-manager.components.RelationInputModal.modal-title',
                                                            defaultMessage: 'Edit a relation'
                                                        })
                                                    })
                                                ]
                                            })
                                        })
                                    }),
                                    /*#__PURE__*/ jsx(RelationModalBody, {
                                        children: /*#__PURE__*/ jsx(IconButton, {
                                            onClick: ()=>{
                                                setActionPosition('navigate');
                                                if (modified && !isSubmitting) {
                                                    setIsConfirmationOpen(true);
                                                } else {
                                                    navigate(getFullPageLink());
                                                }
                                            },
                                            variant: "tertiary",
                                            label: formatMessage({
                                                id: 'content-manager.components.RelationInputModal.button-fullpage',
                                                defaultMessage: 'Go to entry'
                                            }),
                                            children: /*#__PURE__*/ jsx(ArrowsOut, {})
                                        })
                                    }),
                                    /*#__PURE__*/ jsx(Modal.Footer, {
                                        children: /*#__PURE__*/ jsx(Button, {
                                            onClick: ()=>{
                                                if (modified && !isSubmitting) {
                                                    setIsConfirmationOpen(true);
                                                } else {
                                                    handleToggleModal();
                                                }
                                            },
                                            variant: "tertiary",
                                            children: formatMessage({
                                                id: 'app.components.Button.cancel',
                                                defaultMessage: 'Cancel'
                                            })
                                        })
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ jsx(Dialog.Root, {
                        open: isConfirmationOpen,
                        onOpenChange: setIsConfirmationOpen,
                        children: /*#__PURE__*/ jsx(ConfirmDialog, {
                            onConfirm: ()=>{
                                handleConfirm();
                                setIsConfirmationOpen(false);
                                resetForm();
                            },
                            onCancel: ()=>{
                                setIsConfirmationOpen(false);
                            },
                            variant: "danger",
                            children: formatMessage({
                                id: 'content-manager.components.RelationInputModal.confirmation-message',
                                defaultMessage: 'Some changes were not saved. Are you sure you want to close this relation? All changes that were not saved will be lost.'
                            })
                        })
                    })
                ]
            });
        }
    });
};
const CustomTextButton = styled(TextButton)`
  & > span {
    font-size: ${({ theme })=>theme.fontSizes[2]};
    width: inherit;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }
`;
const RelationModalBody = ({ children })=>{
    const { formatMessage } = useIntl();
    const documentMeta = useDocumentContext('RelationModalBody', (state)=>state.meta);
    const documentResponse = useDocumentContext('RelationModalBody', (state)=>state.document);
    const onPreview = useDocumentContext('RelationModalBody', (state)=>state.onPreview);
    const documentLayoutResponse = useDocumentLayout(documentMeta.model);
    const plugins = useStrapiApp('RelationModalBody', (state)=>state.plugins);
    const initialValues = documentResponse.getInitialFormValues();
    const { permissions = [], isLoading: isLoadingPermissions, error } = useRBAC(PERMISSIONS.map((action)=>({
            action,
            subject: documentMeta.model
        })));
    const isLoading = isLoadingPermissions || documentLayoutResponse.isLoading || documentResponse.isLoading;
    if (isLoading && !documentResponse.document?.documentId) {
        return /*#__PURE__*/ jsx(Loader, {
            small: true,
            children: formatMessage({
                id: 'content-manager.ListViewTable.relation-loading',
                defaultMessage: 'Relations are loading'
            })
        });
    }
    if (error || !documentMeta.model || documentLayoutResponse.error || !documentResponse.document || !documentResponse.meta || !documentResponse.schema || !initialValues) {
        return /*#__PURE__*/ jsx(Flex, {
            alignItems: "center",
            height: "100%",
            justifyContent: "center",
            children: /*#__PURE__*/ jsx(EmptyStateLayout, {
                icon: /*#__PURE__*/ jsx(WarningCircle, {
                    width: "16rem"
                }),
                content: formatMessage({
                    id: 'anErrorOccurred',
                    defaultMessage: 'Whoops! Something went wrong. Please, try again.'
                })
            })
        });
    }
    const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);
    const hasDraftAndPublished = documentResponse.schema?.options?.draftAndPublish ?? false;
    const props = {
        activeTab: 'draft',
        collectionType: documentMeta.collectionType,
        model: documentMeta.model,
        documentId: documentMeta.documentId,
        document: documentResponse.document,
        meta: documentResponse.meta,
        onPreview,
        fromRelationModal: true,
        fromPreview: onPreview !== undefined
    };
    return /*#__PURE__*/ jsx(Modal.Body, {
        children: /*#__PURE__*/ jsxs(DocumentRBAC, {
            permissions: permissions,
            model: documentMeta.model,
            children: [
                /*#__PURE__*/ jsxs(Flex, {
                    alignItems: "flex-start",
                    direction: "column",
                    gap: 2,
                    children: [
                        /*#__PURE__*/ jsxs(Flex, {
                            width: "100%",
                            justifyContent: "space-between",
                            gap: 2,
                            children: [
                                /*#__PURE__*/ jsx(Typography, {
                                    tag: "h2",
                                    variant: "alpha",
                                    children: documentTitle
                                }),
                                /*#__PURE__*/ jsxs(Flex, {
                                    gap: 2,
                                    children: [
                                        children,
                                        /*#__PURE__*/ jsx(DescriptionComponentRenderer, {
                                            props: props,
                                            descriptions: plugins['content-manager'].apis.getDocumentActions('relation-modal'),
                                            children: (actions)=>{
                                                const filteredActions = actions.filter((action)=>{
                                                    return [
                                                        action.position
                                                    ].flat().includes('relation-modal');
                                                });
                                                const [primaryAction, secondaryAction] = filteredActions;
                                                if (!primaryAction && !secondaryAction) return null;
                                                // Both actions are available when draft and publish enabled
                                                if (primaryAction && secondaryAction) {
                                                    return /*#__PURE__*/ jsxs(Fragment, {
                                                        children: [
                                                            /*#__PURE__*/ jsx(DocumentActionButton, {
                                                                ...secondaryAction,
                                                                variant: secondaryAction.variant || 'secondary'
                                                            }),
                                                            /*#__PURE__*/ jsx(DocumentActionButton, {
                                                                ...primaryAction,
                                                                variant: primaryAction.variant || 'default'
                                                            })
                                                        ]
                                                    });
                                                }
                                                // Otherwise we just have the save action
                                                return /*#__PURE__*/ jsx(DocumentActionButton, {
                                                    ...primaryAction,
                                                    variant: primaryAction.variant || 'secondary'
                                                });
                                            }
                                        })
                                    ]
                                })
                            ]
                        }),
                        hasDraftAndPublished ? /*#__PURE__*/ jsx(Box, {
                            children: /*#__PURE__*/ jsx(DocumentStatus, {
                                status: documentResponse.document?.status
                            })
                        }) : null
                    ]
                }),
                /*#__PURE__*/ jsx(Flex, {
                    flex: 1,
                    overflow: "auto",
                    alignItems: "stretch",
                    paddingTop: 7,
                    children: /*#__PURE__*/ jsx(Box, {
                        overflow: "auto",
                        flex: 1,
                        children: /*#__PURE__*/ jsx(FormLayout, {
                            layout: documentLayoutResponse.edit.layout,
                            document: documentResponse,
                            hasBackground: false
                        })
                    })
                })
            ]
        })
    });
};

export { RelationModalForm, getCollectionType };
//# sourceMappingURL=RelationModal.mjs.map
