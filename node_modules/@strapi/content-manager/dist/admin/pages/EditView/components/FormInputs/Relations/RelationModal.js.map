{"version":3,"file":"RelationModal.js","sources":["../../../../../../../admin/src/pages/EditView/components/FormInputs/Relations/RelationModal.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  ConfirmDialog,\n  DescriptionComponentRenderer,\n  Form as FormContext,\n  useRBAC,\n  useStrapiApp,\n  createContext,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Button,\n  Dialog,\n  EmptyStateLayout,\n  Flex,\n  IconButton,\n  Loader,\n  Modal,\n  Typography,\n  Tooltip,\n  TextButton,\n} from '@strapi/design-system';\nimport { ArrowLeft, ArrowsOut, WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { COLLECTION_TYPES, SINGLE_TYPES } from '../../../../../constants/collections';\nimport { PERMISSIONS } from '../../../../../constants/plugin';\nimport { type DocumentMeta, useDocumentContext } from '../../../../../features/DocumentContext';\nimport { DocumentRBAC } from '../../../../../features/DocumentRBAC';\nimport { useDocumentLayout } from '../../../../../hooks/useDocumentLayout';\nimport { useLazyGetDocumentQuery } from '../../../../../services/documents';\nimport { createYupSchema } from '../../../../../utils/validation';\nimport { DocumentActionButton } from '../../../components/DocumentActions';\nimport { DocumentStatus } from '../../DocumentStatus';\nimport { FormLayout } from '../../FormLayout';\n\nimport type { ContentManagerPlugin, DocumentActionProps } from '../../../../../content-manager';\n\ninterface RelationModalProps {\n  triggerButtonLabel: string;\n  relation: DocumentMeta;\n}\n\nexport function getCollectionType(url: string) {\n  const regex = new RegExp(`(${COLLECTION_TYPES}|${SINGLE_TYPES})`);\n  const match = url.match(regex);\n  return match ? match[1] : undefined;\n}\n\nconst CustomModalContent = styled(Modal.Content)`\n  width: 90%;\n  max-width: 100%;\n  height: 90%;\n  max-height: 100%;\n`;\n\ninterface RelationModalContextValue {\n  parentModified: boolean;\n  depth: number;\n}\n\nconst [RelationModalProvider, useRelationModal] = createContext<RelationModalContextValue>(\n  'RelationModal',\n  {\n    parentModified: false,\n    depth: 0,\n  }\n);\n\nconst RelationModalForm = ({ relation, triggerButtonLabel }: RelationModalProps) => {\n  const navigate = useNavigate();\n  const { pathname, search } = useLocation();\n  const { formatMessage } = useIntl();\n\n  const [triggerRefetchDocument] = useLazyGetDocumentQuery();\n\n  const currentDocument = useDocumentContext('RelationModalForm', (state) => state.document);\n  const rootDocumentMeta = useDocumentContext(\n    'RelationModalForm',\n    (state) => state.rootDocumentMeta\n  );\n  const currentDocumentMeta = useDocumentContext('RelationModalForm', (state) => state.meta);\n  const changeDocument = useDocumentContext('RelationModalForm', (state) => state.changeDocument);\n  const documentHistory = useDocumentContext('RelationModalForm', (state) => state.documentHistory);\n  const setDocumentHistory = useDocumentContext(\n    'RelationModalForm',\n    (state) => state.setDocumentHistory\n  );\n\n  const [isConfirmationOpen, setIsConfirmationOpen] = React.useState(false);\n  const [actionPosition, setActionPosition] = React.useState<'cancel' | 'back' | 'navigate'>(\n    'cancel'\n  );\n\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  // NOTE: Not sure about this relation modal context, maybe we should move this to DocumentContext?\n  // Get parent modal context if it exists\n  const parentContext = useRelationModal('RelationModalForm', (state) => state);\n  // Get depth of nested modals\n  const depth = parentContext ? parentContext.depth + 1 : 0;\n  // Check if this is a nested modal\n  const isNested = depth > 0;\n\n  const addDocumentToHistory = (document: DocumentMeta) =>\n    setDocumentHistory((prev) => [...prev, document]);\n\n  const getPreviousDocument = () => {\n    if (documentHistory.length === 0) return undefined;\n\n    const lastDocument = documentHistory[documentHistory.length - 1];\n\n    return lastDocument;\n  };\n\n  const removeLastDocumentFromHistory = () => {\n    setDocumentHistory((prev) => [...prev].slice(0, prev.length - 1));\n  };\n\n  const handleToggleModal = () => {\n    if (isModalOpen) {\n      setIsModalOpen(false);\n      const document = {\n        collectionType: rootDocumentMeta.collectionType,\n        model: rootDocumentMeta.model,\n        documentId: rootDocumentMeta.documentId,\n      };\n      // Change back to the root document\n      changeDocument(document);\n      // Reset the document history\n      setDocumentHistory([]);\n      // Reset action position\n      setActionPosition('cancel');\n      // Read from cache or refetch root document\n      triggerRefetchDocument(\n        document,\n        // Favor the cache\n        true\n      );\n    } else {\n      changeDocument(relation);\n      setIsModalOpen(true);\n    }\n  };\n\n  const getFullPageLink = (): string => {\n    const isSingleType = currentDocumentMeta.collectionType === SINGLE_TYPES;\n    const queryParams = currentDocumentMeta.params?.locale\n      ? `?plugins[i18n][locale]=${currentDocumentMeta.params.locale}`\n      : '';\n\n    return `/content-manager/${currentDocumentMeta.collectionType}/${currentDocumentMeta.model}${isSingleType ? '' : '/' + currentDocumentMeta.documentId}${queryParams}`;\n  };\n\n  const handleRedirection = () => {\n    const editViewUrl = `${pathname}${search}`;\n    const isRootDocumentUrl = editViewUrl.includes(getFullPageLink());\n\n    if (isRootDocumentUrl) {\n      handleToggleModal();\n    } else {\n      navigate(getFullPageLink());\n    }\n  };\n\n  const handleConfirm = () => {\n    if (actionPosition === 'navigate') {\n      handleRedirection();\n    } else if (actionPosition === 'back') {\n      const previousRelation = getPreviousDocument();\n      if (previousRelation) {\n        removeLastDocumentFromHistory();\n        changeDocument(previousRelation);\n      }\n    } else {\n      // Add current relation to history before opening a new one in case we are opening a new one\n      if (currentDocumentMeta && Object.keys(currentDocumentMeta).length > 0) {\n        addDocumentToHistory(currentDocumentMeta);\n      }\n      handleToggleModal();\n    }\n  };\n\n  return (\n    <FormContext\n      method=\"PUT\"\n      initialValues={currentDocument.getInitialFormValues()}\n      validate={(values: Record<string, unknown>, options: Record<string, string>) => {\n        const yupSchema = createYupSchema(\n          currentDocument.schema?.attributes,\n          currentDocument.components,\n          {\n            status: currentDocument.document?.status,\n            ...options,\n          }\n        );\n\n        return yupSchema.validate(values, { abortEarly: false });\n      }}\n    >\n      {({ modified, isSubmitting, resetForm }) => {\n        // We don't count the root document, so history starts after 1\n        const hasHistory = documentHistory.length > 1;\n\n        return (\n          <RelationModalProvider parentModified={modified} depth={depth}>\n            <Modal.Root\n              open={isModalOpen}\n              onOpenChange={() => {\n                if (isModalOpen) {\n                  if (modified && !isSubmitting) {\n                    setIsConfirmationOpen(true);\n                  } else {\n                    handleToggleModal();\n                  }\n                }\n              }}\n            >\n              <Modal.Trigger>\n                <Tooltip description={triggerButtonLabel}>\n                  <CustomTextButton\n                    onClick={() => {\n                      // Check if parent modal has unsaved changes\n                      if (isNested && parentContext.parentModified) {\n                        setIsConfirmationOpen(true);\n                        // Return early to avoid opening the modal\n                        return;\n                      } else {\n                        if (modified && !isSubmitting) {\n                          setIsConfirmationOpen(true);\n                        } else {\n                          // Add current relation to history before opening a new one\n                          if (currentDocumentMeta && Object.keys(currentDocumentMeta).length > 0) {\n                            addDocumentToHistory(currentDocumentMeta);\n                          }\n                          handleToggleModal();\n                        }\n\n                        if (!isModalOpen) {\n                          setIsModalOpen(true);\n                        }\n                      }\n                    }}\n                    width=\"100%\"\n                  >\n                    {triggerButtonLabel}\n                  </CustomTextButton>\n                </Tooltip>\n              </Modal.Trigger>\n              <CustomModalContent>\n                <Modal.Header gap={2}>\n                  <Flex justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n                    <Flex gap={2}>\n                      <IconButton\n                        withTooltip={false}\n                        label=\"Back\"\n                        variant=\"ghost\"\n                        disabled={!hasHistory}\n                        onClick={() => {\n                          setActionPosition('back');\n                          if (modified && !isSubmitting) {\n                            setIsConfirmationOpen(true);\n                          } else {\n                            const previousRelation = getPreviousDocument();\n                            if (previousRelation) {\n                              removeLastDocumentFromHistory();\n                              changeDocument(previousRelation);\n                            }\n                          }\n                        }}\n                        marginRight={1}\n                      >\n                        <ArrowLeft />\n                      </IconButton>\n                      <Typography tag=\"span\" fontWeight={600}>\n                        {formatMessage({\n                          id: 'content-manager.components.RelationInputModal.modal-title',\n                          defaultMessage: 'Edit a relation',\n                        })}\n                      </Typography>\n                    </Flex>\n                  </Flex>\n                </Modal.Header>\n                <RelationModalBody>\n                  <IconButton\n                    onClick={() => {\n                      setActionPosition('navigate');\n\n                      if (modified && !isSubmitting) {\n                        setIsConfirmationOpen(true);\n                      } else {\n                        navigate(getFullPageLink());\n                      }\n                    }}\n                    variant=\"tertiary\"\n                    label={formatMessage({\n                      id: 'content-manager.components.RelationInputModal.button-fullpage',\n                      defaultMessage: 'Go to entry',\n                    })}\n                  >\n                    <ArrowsOut />\n                  </IconButton>\n                </RelationModalBody>\n                <Modal.Footer>\n                  <Button\n                    onClick={() => {\n                      if (modified && !isSubmitting) {\n                        setIsConfirmationOpen(true);\n                      } else {\n                        handleToggleModal();\n                      }\n                    }}\n                    variant=\"tertiary\"\n                  >\n                    {formatMessage({\n                      id: 'app.components.Button.cancel',\n                      defaultMessage: 'Cancel',\n                    })}\n                  </Button>\n                </Modal.Footer>\n              </CustomModalContent>\n            </Modal.Root>\n            <Dialog.Root open={isConfirmationOpen} onOpenChange={setIsConfirmationOpen}>\n              <ConfirmDialog\n                onConfirm={() => {\n                  handleConfirm();\n                  setIsConfirmationOpen(false);\n                  resetForm();\n                }}\n                onCancel={() => {\n                  setIsConfirmationOpen(false);\n                }}\n                variant=\"danger\"\n              >\n                {formatMessage({\n                  id: 'content-manager.components.RelationInputModal.confirmation-message',\n                  defaultMessage:\n                    'Some changes were not saved. Are you sure you want to close this relation? All changes that were not saved will be lost.',\n                })}\n              </ConfirmDialog>\n            </Dialog.Root>\n          </RelationModalProvider>\n        );\n      }}\n    </FormContext>\n  );\n};\n\nconst CustomTextButton = styled(TextButton)`\n  & > span {\n    font-size: ${({ theme }) => theme.fontSizes[2]};\n    width: inherit;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n`;\n\ninterface RelationModalBodyProps {\n  /**\n   * Additional modal actions such as \"Open in full page\"\n   */\n  children: React.ReactNode;\n}\n\nconst RelationModalBody = ({ children }: RelationModalBodyProps) => {\n  const { formatMessage } = useIntl();\n\n  const documentMeta = useDocumentContext('RelationModalBody', (state) => state.meta);\n  const documentResponse = useDocumentContext('RelationModalBody', (state) => state.document);\n  const onPreview = useDocumentContext('RelationModalBody', (state) => state.onPreview);\n  const documentLayoutResponse = useDocumentLayout(documentMeta.model);\n  const plugins = useStrapiApp('RelationModalBody', (state) => state.plugins);\n\n  const initialValues = documentResponse.getInitialFormValues();\n\n  const {\n    permissions = [],\n    isLoading: isLoadingPermissions,\n    error,\n  } = useRBAC(\n    PERMISSIONS.map((action) => ({\n      action,\n      subject: documentMeta.model,\n    }))\n  );\n\n  const isLoading =\n    isLoadingPermissions || documentLayoutResponse.isLoading || documentResponse.isLoading;\n  if (isLoading && !documentResponse.document?.documentId) {\n    return (\n      <Loader small>\n        {formatMessage({\n          id: 'content-manager.ListViewTable.relation-loading',\n          defaultMessage: 'Relations are loading',\n        })}\n      </Loader>\n    );\n  }\n\n  if (\n    error ||\n    !documentMeta.model ||\n    documentLayoutResponse.error ||\n    !documentResponse.document ||\n    !documentResponse.meta ||\n    !documentResponse.schema ||\n    !initialValues\n  ) {\n    return (\n      <Flex alignItems=\"center\" height=\"100%\" justifyContent=\"center\">\n        <EmptyStateLayout\n          icon={<WarningCircle width=\"16rem\" />}\n          content={formatMessage({\n            id: 'anErrorOccurred',\n            defaultMessage: 'Whoops! Something went wrong. Please, try again.',\n          })}\n        />\n      </Flex>\n    );\n  }\n\n  const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);\n  const hasDraftAndPublished = documentResponse.schema?.options?.draftAndPublish ?? false;\n\n  const props = {\n    activeTab: 'draft',\n    collectionType: documentMeta.collectionType,\n    model: documentMeta.model,\n    documentId: documentMeta.documentId,\n    document: documentResponse.document,\n    meta: documentResponse.meta,\n    onPreview,\n    fromRelationModal: true,\n    fromPreview: onPreview !== undefined,\n  } satisfies DocumentActionProps;\n\n  return (\n    <Modal.Body>\n      <DocumentRBAC permissions={permissions} model={documentMeta.model}>\n        <Flex alignItems=\"flex-start\" direction=\"column\" gap={2}>\n          <Flex width=\"100%\" justifyContent=\"space-between\" gap={2}>\n            <Typography tag=\"h2\" variant=\"alpha\">\n              {documentTitle}\n            </Typography>\n            <Flex gap={2}>\n              {children}\n              <DescriptionComponentRenderer\n                props={props}\n                descriptions={(\n                  plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n                ).getDocumentActions('relation-modal')}\n              >\n                {(actions) => {\n                  const filteredActions = actions.filter((action) => {\n                    return [action.position].flat().includes('relation-modal');\n                  });\n                  const [primaryAction, secondaryAction] = filteredActions;\n\n                  if (!primaryAction && !secondaryAction) return null;\n\n                  // Both actions are available when draft and publish enabled\n                  if (primaryAction && secondaryAction) {\n                    return (\n                      <>\n                        {/* Save */}\n                        <DocumentActionButton\n                          {...secondaryAction}\n                          variant={secondaryAction.variant || 'secondary'}\n                        />\n                        {/* Publish */}\n                        <DocumentActionButton\n                          {...primaryAction}\n                          variant={primaryAction.variant || 'default'}\n                        />\n                      </>\n                    );\n                  }\n\n                  // Otherwise we just have the save action\n                  return (\n                    <DocumentActionButton\n                      {...primaryAction}\n                      variant={primaryAction.variant || 'secondary'}\n                    />\n                  );\n                }}\n              </DescriptionComponentRenderer>\n            </Flex>\n          </Flex>\n          {hasDraftAndPublished ? (\n            <Box>\n              <DocumentStatus status={documentResponse.document?.status} />\n            </Box>\n          ) : null}\n        </Flex>\n\n        <Flex flex={1} overflow=\"auto\" alignItems=\"stretch\" paddingTop={7}>\n          <Box overflow=\"auto\" flex={1}>\n            <FormLayout\n              layout={documentLayoutResponse.edit.layout}\n              document={documentResponse}\n              hasBackground={false}\n            />\n          </Box>\n        </Flex>\n      </DocumentRBAC>\n    </Modal.Body>\n  );\n};\n\nexport { RelationModalForm };\n"],"names":["getCollectionType","url","regex","RegExp","COLLECTION_TYPES","SINGLE_TYPES","match","undefined","CustomModalContent","styled","Modal","Content","RelationModalProvider","useRelationModal","createContext","parentModified","depth","RelationModalForm","relation","triggerButtonLabel","navigate","useNavigate","pathname","search","useLocation","formatMessage","useIntl","triggerRefetchDocument","useLazyGetDocumentQuery","currentDocument","useDocumentContext","state","document","rootDocumentMeta","currentDocumentMeta","meta","changeDocument","documentHistory","setDocumentHistory","isConfirmationOpen","setIsConfirmationOpen","React","useState","actionPosition","setActionPosition","isModalOpen","setIsModalOpen","parentContext","isNested","addDocumentToHistory","prev","getPreviousDocument","length","lastDocument","removeLastDocumentFromHistory","slice","handleToggleModal","collectionType","model","documentId","getFullPageLink","isSingleType","queryParams","params","locale","handleRedirection","editViewUrl","isRootDocumentUrl","includes","handleConfirm","previousRelation","Object","keys","_jsx","FormContext","method","initialValues","getInitialFormValues","validate","values","options","yupSchema","createYupSchema","schema","attributes","components","status","abortEarly","modified","isSubmitting","resetForm","hasHistory","_jsxs","Root","open","onOpenChange","Trigger","Tooltip","description","CustomTextButton","onClick","width","Header","gap","Flex","justifyContent","alignItems","IconButton","withTooltip","label","variant","disabled","marginRight","ArrowLeft","Typography","tag","fontWeight","id","defaultMessage","RelationModalBody","ArrowsOut","Footer","Button","Dialog","ConfirmDialog","onConfirm","onCancel","TextButton","theme","fontSizes","children","documentMeta","documentResponse","onPreview","documentLayoutResponse","useDocumentLayout","plugins","useStrapiApp","permissions","isLoading","isLoadingPermissions","error","useRBAC","PERMISSIONS","map","action","subject","Loader","small","height","EmptyStateLayout","icon","WarningCircle","content","documentTitle","getTitle","edit","settings","mainField","hasDraftAndPublished","draftAndPublish","props","activeTab","fromRelationModal","fromPreview","Body","DocumentRBAC","direction","DescriptionComponentRenderer","descriptions","apis","getDocumentActions","actions","filteredActions","filter","position","flat","primaryAction","secondaryAction","_Fragment","DocumentActionButton","Box","DocumentStatus","flex","overflow","paddingTop","FormLayout","layout","hasBackground"],"mappings":"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"}